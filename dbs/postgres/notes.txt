This directory contains the scripts that I use to run PostgreSQL.
    https://hub.docker.com/_/postgres

There are several commands that you will want to learn to use the container. First
is:
    docker container pull postgres:latest

This adds the PostgreSQL container image to your local Docker images. Once, you have it
added to the images, you will want to run it. The following will do that with the
defaults that the generated application will automatically use:
    docker run --name postgres1 -e POSTGRES_PASSWORD="Passw0rd!" -port 5430:5432 -d postgres:latest
                                or
    ./run.sh
You may get a "missing postgres1" message and that is ok. Ignore it.  You can issue
one run.sh after another, because it kills the one running and gives you a clean system
to start over with.

After you have it running, you can stop it with:
    docker container stop mariadb1
                or
    docker container stop mysql1

And restart the stopped container with:
    docker container start mariadb1
                or
    docker container start mysql1
                or
            ./kill.sh

To delete the container that you created with the "run" command, you do
    docker container rm -f mysql1
This stops the container and deletes it.  It does not get rid of the original
image that you pulled. So, you use ./run.sh to restart it from scratch.

So, for testing, you issue the "run", then do your testing. If the database is
no longer useable or you want to start from scratch, you simply do another "run".
If you want to quit and get rid of the container, just do a "kill.sh"
This is why testing using Docker is so great!

To implement PostgreSQL, I used PostgreSQL native on MacOS since I had it installed
from before.  Also, I used pgAdmin to add the "Finances" database under "postgres"
which is the default user. From there, I was able to get the connection string
done and running.

Now that I had it running native, I turned to running it through docker. To set up
a Docker image of PostgreSQL, I did the following:

    * I changed the port from 5432 to 5430 since it seemed to conflict with the
        installed PostgreSQL.
    * "./run.sh" loads postgres1 from the Docker Postgres Image with everything
        established properly except for the database being defined.
    * I had to use pgAdmin to create the "Finances" database under 'postgres' user.
        It needed to be predefined before we could use and the generated program
        did not seem like the right place for that. You select the "Databases" in
        the right hand column and then "Create Database".
    * Now you can run the app with "/tmp/bin/app -dbPort=5430" from the command
        line.
    * The shell scripts in this section should work:
        ./run.sh        <- Create and Run the postgres1 container
        ./exec.sh       <- Allows you to peer inside the container and make adjustments
                            if needed.
        ./kill.sh       <- Kills and deletes the postgres1 container


