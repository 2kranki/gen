// vi:nu:et:sts=4 ts=4 sw=4
// See License.txt in main repository directory

// io[[.TD.Data.TitledName]] contains all the functions
// and data to interact with the SQL Database.

// Generated: [[Time]]
[[- $dot := .]]
[[- $d  := .TD.Data]]
[[- $dn := .TD.Data.TitledName]]

package io[[$dn]]

import (
	"testing"
)


var io      *IO_[[$dn]]


//============================================================================
//                              Tests
//============================================================================

//----------------------------------------------------------------------------
//                              Connect
//----------------------------------------------------------------------------

func TestConnect(t *testing.T) {
    var err         error

	t.Logf("TestConnect()...\n")
	io = [[$dn]]New()
	io.DefaultParms()
    err = io.Connect()
    if err == nil {
	    err = io.Disconnect()
        if err != nil {
            t.Fatalf("Error: %s\n\n", err)
        }
        io = nil
    } else {
            t.Fatalf("Error: %s\n\n", err)
    }
	t.Logf("TestConnect() - End of Test\n\n\n")
}

//----------------------------------------------------------------------------
//                              Disconnect
//----------------------------------------------------------------------------

func TestDisconnect(t *testing.T) {
    var err         error

	t.Logf("TestDisconnect()...\n")
	io = [[$dn]]New()
	io.DefaultParms()

	// Disconnect before a connection has been made.
    err = io.Disconnect()
    if err == nil {
        t.Fatal("Error: Never Connected!\n\n\n")
    }

    if io.IsConnected() {
        t.Fatal("Error: Never Connected!\n\n\n")
    }

    // Now connect then disconnect.
    err = io.Connect()
    if err != nil {
        t.Fatal("Error: Cannot connect: ", err)
    }

    if !io.IsConnected() {
        t.Fatal("Error: Never Connected!\n\n\n")
    }

    err = io.Disconnect()
    if err != nil {
        t.Fatal("Error: Cannot disconnect: ", err)
    }

	t.Logf("TestDisconnect() - End of Test\n\n\n")
}

