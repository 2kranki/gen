// vi:nu:et:sts=4 ts=4 sw=4
// See License.txt in main repository directory

//  Handle HTTP Events

// Generated: [[Time]]
[[- $dot := .]]
[[- $n := .TD.Data.TitledName]]


package hndlr[[.TD.Data.TitledName]]

import (
	[[ if eq .TD.Data.SqlType "mariadb" ]]
		ERROR - NOT IMPLEMENTED
	[[ else if eq .TD.Data.SqlType "mssql" ]]
	_ "github.com/denisenkom/go-mssqldb"
	[[ else if eq .TD.Data.SqlType "mysql" ]]
		_ "github.com/go-sql-driver/mysql"
	[[ else if eq .TD.Data.SqlType "postgres" ]]
		_ "github.com/lib/pq"
	[[ else if eq .TD.Data.SqlType "sqlite" ]]
	_ "github.com/mattn/go-sqlite3"
	[[ end ]]
    "fmt"
    [[if GenDebugging]]
        "log"
    [[end]]
    //"io"
    "../io[[.TD.Data.TitledName]]"
	"net/http"
	"strconv"
	//"strings"
)

    // [[.Table.TitledName]]Req2Struct converts the form values to a struct.
    func [[.Table.TitledName]]Req2Struct(r *http.Request) (io[[.TD.Data.TitledName]].[[.Table.TitledName]], error) {
        var err         error
        var wrk         string

        [[if GenDebugging]]
            log.Printf("[[.Table.TitledName]]Req2Struct()\n")
            log.Printf("\tr.FormValue: %q\n", r.FormValue)
        [[end]]

        data  := io[[$n]].[[.Table.TitledName]]{}
        [[range $f := .Table.Fields -]]
            [[$f.RValueToStruct "data" -]]
            if err != nil {
                goto exitFunc
            }
        [[end]]

    exitFunc:
        [[if GenDebugging]]
            log.Printf("...end [[.Table.TitledName]]Req2Struct(%+v, %s)\n", data, ErrorString(err))
        [[end]]
        return data, err
    }

    // [[.Table.TitledName]]Show displays the given record.
    func [[.Table.TitledName]]Show(w http.ResponseWriter, rcd  *io[[$n]].[[.Table.TitledName]], msg string) {
	    var err     error

        [[if GenDebugging]]
            log.Printf("[[.Table.TitledName]]Show(%+v, %s)\n", rcd, msg)
        [[end]]

	    data := struct {
	                Rcd         *io[[$n]].[[.Table.TitledName]]
	                Msg         string
	            }{rcd, msg}
        name := "[[$n]].[[.Table.TitledName]].form.gohtml"
        [[if GenDebugging]]
            log.Printf("\tRcd: %+v\n", data.Rcd)
            log.Printf("\tMsg: %s\n", data.Msg)
            log.Printf("\tname: %s\n", name)
        [[end]]
	    err = Tmpls.ExecuteTemplate(w, name, data)
	    if err != nil {
		    fmt.Fprintf(w, err.Error())
	    }

        [[if GenDebugging]]
            log.Printf("...end [[.Table.TitledName]]Show(%s)\n", ErrorString(err))
        [[end]]
    }

    // [[.Table.TitledName]]HndlrDelete handles an delete request which comes from
    // the row display form.
    func [[.Table.TitledName]]HndlrDelete(w http.ResponseWriter, r *http.Request) {
        var err     error
        var key     string
	    var rcd     *io[[$n]].[[.Table.TitledName]]

        [[if GenDebugging]]
            log.Printf("[[.Table.TitledName]]HndlrDelete(%s, %s)\n", r.Method, r.FormValue("[[.Table.PrimaryKey.Name]]"))
        [[end]]
        if r.Method != "GET" {
            [[if GenDebugging]]
                log.Printf("...end [[.Table.TitledName]]HndlrNext(Error:405) - Not GET\n")
            [[end]]
            http.Error(w, http.StatusText(405), http.StatusMethodNotAllowed)
            return
        }

        // Get the key.
	    key = r.FormValue("[[.Table.PrimaryKey.Name]]")
        // if key is not present, assume first record.
        [[if GenDebugging]]
            log.Printf("\tkey: %s\n", key)
        [[end]]
        if key == "" {
            [[if GenDebugging]]
                log.Printf("...end [[.Table.TitledName]]HndlrNext(Error:400) - No Key\n")
            [[end]]
            http.Error(w, http.StatusText(400), http.StatusBadRequest)
            return
        }

        // Delete the row with data given.
        err = io[[.TD.Data.TitledName]].[[.Table.Name]]RowDelete(key)
	    if err != nil {
            [[if GenDebugging]]
                log.Printf("...end [[.Table.TitledName]]HndlrNext(Error:400) - %s\n", ErrorString(err))
            [[end]]
            http.Error(w, http.StatusText(400), http.StatusBadRequest)
            return
	    }

        // Get the next row in the form with status message.
        rcd, _ = io[[.TD.Data.TitledName]].[[.Table.Name]]RowNext(key)

        // Display the row in the form.
        [[.Table.TitledName]]Show(w, rcd, "Row deleted!")

        [[if GenDebugging]]
            log.Printf("...end [[.Table.TitledName]]HndlrDelete(%s)\n", ErrorString(err))
        [[end]]
    }

    // [[.Table.TitledName]]HndlrEmpty displays the table row form with an empty row.
    func [[.Table.TitledName]]HndlrEmpty(w http.ResponseWriter, r *http.Request) {
	    var rcd     *io[[$n]].[[.Table.TitledName]]

        [[if GenDebugging]]
            log.Printf("[[.Table.TitledName]]HndlrEmpty(%s, %s)\n", r.Method, r.FormValue("[[.Table.PrimaryKey.Name]]"))
        [[end]]
        if r.Method != "GET" {
        [[if GenDebugging]]
            log.Printf("...end [[.Table.TitledName]]HndlrEmpty(Error:405) - Not GET\n")
        [[end]]
            http.Error(w, http.StatusText(405), http.StatusMethodNotAllowed)
            return
        }

        // Verify any fields that need it.

        // Get the row to display.
        rcd = &io[[$n]].[[.Table.TitledName]]{}

        // Display the row in the form.
        [[.Table.TitledName]]Show(w, rcd, "")

        [[if GenDebugging]]
            log.Printf("...end [[.Table.TitledName]]HndlrEmpty()\n")
        [[end]]
    }

    // [[.Table.Name]]HndlrFirst displays the first row.
    func [[.Table.TitledName]]HndlrFirst(w http.ResponseWriter, r *http.Request) {
	    var rcd     *io[[$n]].[[.Table.TitledName]]
        var err     error

        [[if GenDebugging]]
            log.Printf("[[.Table.TitledName]]HndlrFirst(%s, %s)\n", r.Method, r.FormValue("[[.Table.PrimaryKey.Name]]"))
        [[end]]

        if r.Method != "GET" {
            [[if GenDebugging]]
                log.Printf("...end [[.Table.TitledName]]HndlrFirst(Error:405) - Not GET\n")
            [[end]]
            http.Error(w, http.StatusText(405), http.StatusMethodNotAllowed)
            return
        }

        // Get the next row to display.
        rcd, err = io[[$n]].[[.Table.TitledName]]RowFirst()
	    if err != nil {
            [[if GenDebugging]]
                log.Printf("...end [[.Table.TitledName]]HndlrFirst(Error:400) - No Key\n")
            [[end]]
            http.Error(w, http.StatusText(400), http.StatusBadRequest)
            return
	    }

        // Display the row in the form.
        [[.Table.TitledName]]Show(w, rcd, "")


        [[if GenDebugging]]
            log.Printf("...end [[.Table.TitledName]]HndlrFirst()\n")
        [[end]]
    }

    // [[.Table.TitledName]]HndlrForm displays the raw table row form without data.
    func [[.Table.TitledName]]HndlrForm(w http.ResponseWriter, r *http.Request) {

        [[if GenDebugging]]
            log.Printf("[[.Table.TitledName]]HndlrForm(%s, %s)\n", r.Method, r.FormValue("[[.Table.PrimaryKey.Name]]"))
        [[end]]
        if r.Method != "GET" {
        [[if GenDebugging]]
            log.Printf("...end [[.Table.TitledName]]HndlrForm(Error:405) - Not GET\n")
        [[end]]
            http.Error(w, http.StatusText(405), http.StatusMethodNotAllowed)
            return
        }

        // Verify any fields that need it.

        // Get the row to display.

        // Display the row in the form.
	    http.ServeFile(w, r, "./tmpl/[[$n]].[[.Table.TitledName]].form.gohtml")

        [[if GenDebugging]]
            log.Printf("...end [[.Table.TitledName]]HndlrForm()\n")
        [[end]]
    }

    // [[.Table.TitledName]]HndlrIndex handles the display of the table index.
    func [[.Table.TitledName]]HndlrIndex(w http.ResponseWriter, r *http.Request) {

    [[if GenDebugging]]
        log.Printf("[[.Table.TitledName]]HndlrIndex()\n")
    [[end]]

        if r.Method != "GET" {
            http.Error(w, http.StatusText(405), http.StatusMethodNotAllowed)
            return
        }

        // for all rows {
            // Get the row to display.
            // Display the row index fields.
        // }

        w.Write([]byte("Show table index here..."))
    }

    // [[.Table.TitledName]]HndlrInsert handles an add row request which comes from
    // the row display form.
    func [[.Table.TitledName]]HndlrInsert(w http.ResponseWriter, r *http.Request) {
	    var rcd     *io[[$n]].[[.Table.TitledName]]
        var err     error

        [[if GenDebugging]]
            log.Printf("[[.Table.TitledName]]HndlrInsert(%s, %s)\n", r.Method, r.FormValue("[[.Table.PrimaryKey.Name]]"))
        [[end]]
        if r.Method != "POST" {
            http.Error(w, http.StatusText(405), http.StatusMethodNotAllowed)
            return
        }

        // Create a record from the data given.
        data, err := [[.Table.TitledName]]Req2Struct(r)
        if err != nil {
            http.Error(w, http.StatusText(400), http.StatusBadRequest)
            return
        }

        // Verify any fields that need it.

        // Add the row.
        err = io[[$n]].[[.Table.TitledName]]RowInsert(&data)
        if err != nil {
            http.Error(w, http.StatusText(400), http.StatusBadRequest)
            return
        }

        // Get the last row as a guess of where the inserted row went.
        rcd, _ = io[[$n]].[[.Table.TitledName]]RowLast()

        // Display the row in the form.
        [[.Table.TitledName]]Show(w, rcd, "Row added!")

        [[if GenDebugging]]
            log.Printf("...end [[.Table.TitledName]]HndlrInsert(%s)\n", ErrorString(err))
        [[end]]
    }

    // [[.Table.Name]]HndlrLast displays the first row.
    func [[.Table.TitledName]]HndlrLast(w http.ResponseWriter, r *http.Request) {
	    var rcd     *io[[$n]].[[.Table.TitledName]]
        var err     error

        [[if GenDebugging]]
            log.Printf("[[.Table.TitledName]]HndlrLast(%s, %s)\n", r.Method, r.FormValue("[[.Table.PrimaryKey.Name]]"))
        [[end]]

        if r.Method != "GET" {
            [[if GenDebugging]]
                log.Printf("...end [[.Table.TitledName]]HndlrLast(Error:405) - Not GET\n")
            [[end]]
            http.Error(w, http.StatusText(405), http.StatusMethodNotAllowed)
            return
        }

        // Get the next row to display.
        rcd, err = io[[$n]].[[.Table.TitledName]]RowLast()
	    if err != nil {
            [[if GenDebugging]]
                log.Printf("...end [[.Table.TitledName]]HndlrLast(Error:400) - No Key\n")
            [[end]]
            http.Error(w, http.StatusText(400), http.StatusBadRequest)
            return
	    }

        // Display the row in the form.
        [[.Table.TitledName]]Show(w, rcd, "")

        [[if GenDebugging]]
            log.Printf("...end [[.Table.TitledName]]HndlrLast()\n")
        [[end]]
    }

    // [[.Table.TitledName]]HndlrNext handles an next request which comes from
    // the row display form and should display the next row from the
    // current one.
    func [[.Table.TitledName]]HndlrNext(w http.ResponseWriter, r *http.Request) {
	    var rcd     *io[[$n]].[[.Table.TitledName]]
        var err     error
        var key     string

        [[if GenDebugging]]
            log.Printf("[[.Table.TitledName]]HndlrNext(%s, %s)\n", r.Method, r.FormValue("[[.Table.PrimaryKey.Name]]"))
        [[end]]

        // Verify HTTP parameters
        if r.Method != "GET" {
            http.Error(w, http.StatusText(405), http.StatusMethodNotAllowed)
            return
        }

        // Get the prior key.
	    key = r.FormValue("[[.Table.PrimaryKey.Name]]")
        [[if GenDebugging]]
            log.Printf("\tkey: %s\n", key)
        [[end]]
        if key == "" {
            [[if GenDebugging]]
                log.Printf("...end [[.Table.TitledName]]HndlrNext(Error:400) - No Key\n")
            [[end]]
            http.Error(w, http.StatusText(400), http.StatusBadRequest)
            return
        }

        // Get the next row to display.
        rcd, err = io[[$n]].[[.Table.TitledName]]RowNext(key)
	    if err != nil {
            [[if GenDebugging]]
                log.Printf("...end [[.Table.TitledName]]HndlrNext(Error:400) - No Key\n")
            [[end]]
            http.Error(w, http.StatusText(400), http.StatusBadRequest)
            return
	    }

        // Display the row in the form.
        [[.Table.TitledName]]Show(w, rcd, "")

        [[if GenDebugging]]
            log.Printf("...end [[.Table.TitledName]]HndlrNext()\n")
        [[end]]
    }

    // [[.Table.Name]]HndlrPrev handles an previous request which comes from
    // the row display form and should display the previous row from the
    // current one.
    func [[.Table.TitledName]]HndlrPrev(w http.ResponseWriter, r *http.Request) {
	    var rcd     *io[[$n]].[[.Table.TitledName]]
        var err     error
        var key     string

        [[if GenDebugging]]
            log.Printf("[[.Table.TitledName]]HndlrPrev(%s, %s)\n", r.Method, r.FormValue("[[.Table.PrimaryKey.Name]]"))
        [[end]]

        if r.Method != "GET" {
            http.Error(w, http.StatusText(405), http.StatusMethodNotAllowed)
            return
        }

        // Get the prior key.
	    key = r.FormValue("[[.Table.PrimaryKey.Name]]")
        [[if GenDebugging]]
            log.Printf("\tkey: %s\n", key)
        [[end]]
        if key == "" {
            [[if GenDebugging]]
                log.Printf("...end [[.Table.TitledName]]HndlrPrev(Error:400) - No Key\n")
            [[end]]
            http.Error(w, http.StatusText(400), http.StatusBadRequest)
            return
        }

        // Get the next row to display.
        rcd, err = io[[$n]].[[.Table.TitledName]]RowPrev(key)
	    if err != nil {
            [[if GenDebugging]]
                log.Printf("...end [[.Table.TitledName]]HndlrNext(Error:400) - No Key\n")
            [[end]]
            http.Error(w, http.StatusText(400), http.StatusBadRequest)
            return
	    }

        // Display the row in the form.
        [[.Table.TitledName]]Show(w, rcd, "")


        [[if GenDebugging]]
            log.Printf("...end [[.Table.TitledName]]HndlrPrev()\n")
        [[end]]
    }

    // [[.Table.TitledName]]HndlrShow handles displaying of the table row form display.
    func [[.Table.TitledName]]HndlrShow(w http.ResponseWriter, r *http.Request) {
        var err     error
        var key     string
	    var rcd     *io[[$n]].[[.Table.TitledName]]

        [[if GenDebugging]]
            log.Printf("[[.Table.TitledName]]HndlrShow(%s, %s)\n", r.Method, r.FormValue("[[.Table.PrimaryKey.Name]]"))
        [[end]]
        if r.Method != "GET" {
            [[if GenDebugging]]
                log.Printf("...end [[.Table.TitledName]]HndlrShow(Error:405) - Not GET\n")
            [[end]]
            http.Error(w, http.StatusText(405), http.StatusMethodNotAllowed)
            return
        }

        // Verify any fields that need it.
	    key = r.FormValue("[[.Table.PrimaryKey.Name]]")
        // if key is not present, assume first record.
        [[if GenDebugging]]
            log.Printf("\tkey: %s\n", key)
        [[end]]

        // Get the row to display.
        if key == "" {
            rcd, err = io[[.TD.Data.TitledName]].[[.Table.Name]]RowFirst()
        } else {
            rcd, err = io[[.TD.Data.TitledName]].[[.Table.Name]]RowFind(key)
        }
	    if err != nil {
            [[if GenDebugging]]
                log.Printf("...end [[.Table.TitledName]]HndlrShow(Error:400) - %s\n", err.Error())
            [[end]]
            http.Error(w, http.StatusText(400), http.StatusBadRequest)
            return
	    }

        // Display the row in the form.
        [[.Table.TitledName]]Show(w, rcd, "")

        [[if GenDebugging]]
            log.Printf("...end [[.Table.TitledName]]HndlrShow()\n")
        [[end]]
    }

    // [[.Table.TitledName]]HndlrTableCreate creates the table deleting any
    // current ones.
    func [[.Table.TitledName]]HndlrTableCreate(w http.ResponseWriter, r *http.Request) {
        var err         error

        [[if GenDebugging]]
            log.Printf("[[.Table.TitledName]]HndlrCreate(%s)\n", r.Method)
        [[end]]

        // Verify HTTP parameters
        if r.Method != "GET" {
            http.Error(w, http.StatusText(405), http.StatusMethodNotAllowed)
            return
        }

        // Create the table.
        err = io[[$n]].[[.Table.TitledName]]TableCreate()
        if err == nil {
            w.Write([]byte("Table was created"))
        } else {
            w.Write([]byte("Table creation had an error of:" + err.Error()))
        }

        [[if GenDebugging]]
            log.Printf("...end [[.Table.TitledName]]HndlrCreate(%s)\n", ErrorString(err))
        [[end]]
    }

    // [[.Table.TitledName]]HndlrTableLoad creates the table deleting any
    // current ones and loads in some test rows.
    func [[.Table.TitledName]]HndlrTableLoad(w http.ResponseWriter, r *http.Request) {
        var err         error
        var rcd         io[[$n]].[[.Table.TitledName]]

        [[if GenDebugging]]
            log.Printf("[[.Table.TitledName]]HndlrLoad(%s)\n", r.Method)
        [[end]]

        // Verify HTTP parameters
        if r.Method != "GET" {
            http.Error(w, http.StatusText(405), http.StatusMethodNotAllowed)
            return
        }

        // Create the table.
        err = io[[$n]].[[.Table.TitledName]]TableCreate()
        if err == nil {
            w.Write([]byte("Table was created\n"))
        } else {
            w.Write([]byte("Table creation had an error of:" + err.Error()))
        }

        // Load the test rows.
        // Now add some records.
        for i := 0; i < 10; i++ {
            chr := 'A' + i
            rcd.Name = string(chr)
            rcd.Num = i
            err = io[[$n]].[[.Table.TitledName]]RowInsert(&rcd)
            if err == nil {
                str := fmt.Sprintf("Added row: %c\n", chr)
                w.Write([]byte(str))
            } else {
                str := fmt.Sprintf("Table creation had an error of: %c\n", chr)
                w.Write([]byte(str))
            }
        }

        [[if GenDebugging]]
            log.Printf("...end [[.Table.TitledName]]HndlrLoad(%s)\n", ErrorString(err))
        [[end]]
    }

    // [[.Table.TitledName]]HndlrUpdate handles an update request which comes from
    // the row display form.
    func [[.Table.TitledName]]HndlrUpdate(w http.ResponseWriter, r *http.Request) {
        var err     error
        var key     string

        [[if GenDebugging]]
            log.Printf("[[.Table.TitledName]]HndlrUpdate(%s, %s)\n", r.Method, r.FormValue("[[.Table.PrimaryKey.Name]]"))
        [[end]]

        if r.Method != "POST" {
            http.Error(w, http.StatusText(405), http.StatusMethodNotAllowed)
            return
        }

        // Verify any fields that need it.
	    key = r.FormValue("[[.Table.PrimaryKey.Name]]")
        // if key is not present, assume first record.
        [[if GenDebugging]]
            log.Printf("\tkey: %s\n", key)
        [[end]]
        if key == "" {
            [[if GenDebugging]]
                log.Printf("...end [[.Table.TitledName]]HndlrUpdate(Error:400) - No Key\n")
            [[end]]
            http.Error(w, http.StatusText(400), http.StatusBadRequest)
            return
        }

        // Delete the row.
        err = io[[.TD.Data.TitledName]].[[.Table.Name]]RowDelete(key)
	    if err != nil {
            [[if GenDebugging]]
                log.Printf("...end [[.Table.TitledName]]HndlrNext(Error:400) - %s\n", ErrorString(err))
            [[end]]
            http.Error(w, http.StatusText(400), http.StatusBadRequest)
            return
	    }

        // Create a record from the data given.
        data, err := [[.Table.TitledName]]Req2Struct(r)
        if err != nil {
            http.Error(w, http.StatusText(400), http.StatusBadRequest)
            return
        }

        // Add the row.
        err = io[[$n]].[[.Table.TitledName]]RowInsert(&data)
        if err != nil {
            http.Error(w, http.StatusText(400), http.StatusBadRequest)
            return
        }

        // Display the next row in the form.
        [[.Table.TitledName]]Show(w, &data, "Record updated")

        [[if GenDebugging]]
            log.Printf("...end [[.Table.TitledName]]HndlrUpdate()\n")
        [[end]]
    }

