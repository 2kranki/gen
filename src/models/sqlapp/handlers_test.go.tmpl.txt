// vi:nu:et:sts=4 ts=4 sw=4
// See License.txt in main repository directory

// io[[.TD.Data.TitledName]] contains all the functions
// and data to interact with the SQL Database.

// Generated: [[Time]]

package hndlr[[.TD.Data.TitledName]]
[[- $n := .TD.Data.TitledName]]

import (
    //"fmt"
    "io/ioutil"
    "log"
    "net/http/httptest"
	"testing"
    "../io[[$n]]"
)

// SetupParms sets up the environment for testing including
// creating the test databases needed for testing the handlers.
func SetupParms(t *testing.T) {
    var err         error
[[- range $t := .TD.Data.Tables ]]
    var rcd[[$t.TitledName]]    io[[$n]].[[$t.TitledName]]
[[- end]]

    t.Logf("SetupParms()...\n")
    SetTmplsDir("../tmpl")
    SetupTmpls()

    io[[$n]].SetServer("test.db")

    // Start clean with new empty tables.
    err = io[[$n]].Connect()
    if err != nil {
        t.Fatal("Error: Cannot connect: ", err)
    }
    err = io[[$n]].TablesCreate()
    if err != nil {
        t.Fatal("Error: Cannot create tables: ", err)
    }

    // Now add some records.
    for i := 0; i < 5; i++ {
        t.Logf("\tInserting Record %d\n", i)
        chr := 'A' + i
[[- range $t := .TD.Data.Tables ]]
        [[/*TODO: Fix this for various key types*/]]
        rcd[[$t.TitledName]].[[$t.PrimaryKey.Name]] = string(chr)
        //rcd[[$t.TitledName]].Num = i
        err = io[[$n]].[[$t.TitledName]]RowInsert(&rcd[[$t.TitledName]])
        if err != nil {
            t.Fatalf("Error: : Record Insertion Failed: %s\n\n\n", err)
        }
[[- end]]
    }

    t.Logf("...End of SetupParms()\n")
}

[[- range $t := .TD.Data.Tables ]]
    func Test[[$t.TitledName]]Show(t *testing.T) {
        var rcd         io[[$n]].[[$t.TitledName]]
        var w           *httptest.ResponseRecorder

        t.Logf("Test[[$t.TitledName]]Show()...\n")
        SetupParms(t)
        w = httptest.NewRecorder()

        // First try a blank record.
        [[$t.TitledName]]Show(w, &rcd, "")
        resp := w.Result()
        // fmt.Println(resp.StatusCode)
        // fmt.Println(resp.Header.Get("Content-Type"))
        body, _ := ioutil.ReadAll(resp.Body)
        t.Logf("Output:\n%s\n\n\n", string(body))

        t.Logf("Test[[$t.TitledName]]Show() - End of Test\n\n\n")
    }

    func Test[[$t.TitledName]]HndlrDelete(t *testing.T) {
        var err         error

        t.Logf("Test[[$t.TitledName]]HndlrDelete()...\n")
	    SetupParms(t)

        //err = db.Ping()
        if err != nil {
            log.Fatalln("Error: Cannot connect: ", err)
        }

	    t.Logf("Test[[$t.TitledName]]HndlrDelete() - End of Test\n\n\n")
    }

    func Test[[$t.TitledName]]HndlrIndex(t *testing.T) {
        var err         error

        t.Logf("Test[[$t.TitledName]]HndlrIndex()...\n")
	    SetupParms(t)

        //err = db.Ping()
        if err != nil {
            log.Fatalln("Error: Cannot connect: ", err)
        }

	    t.Logf("Test[[$t.TitledName]]HndlrIndex() - End of Test\n\n\n")
    }

    func Test[[$t.TitledName]]HndlrInsert(t *testing.T) {
        var err         error

        t.Logf("Test[[$t.TitledName]]HndlrInsert()...\n")
	    SetupParms(t)

        //err = db.Ping()
        if err != nil {
            log.Fatalln("Error: Cannot connect: ", err)
        }

	    t.Logf("Test[[$t.TitledName]]HndlrInsert() - End of Test\n\n\n")
    }

    func Test[[$t.TitledName]]HndlrNext(t *testing.T) {
        var err         error

        t.Logf("Test[[$t.TitledName]]HndlrNext()...\n")
	    SetupParms(t)

        //err = db.Ping()
        if err != nil {
            log.Fatalln("Error: Cannot connect: ", err)
        }

	    t.Logf("Test[[$t.TitledName]]HndlrNext() - End of Test\n\n\n")
    }

    func Test[[$t.TitledName]]HndlrPrev(t *testing.T) {
        var err         error

        t.Logf("Test[[$t.TitledName]]HndlrPrev()...\n")
	    SetupParms(t)

        //err = db.Ping()
        if err != nil {
            log.Fatalln("Error: Cannot connect: ", err)
        }

	    t.Logf("Test[[$t.TitledName]]HndlrPrev() - End of Test\n\n\n")
    }

    func Test[[$t.TitledName]]HndlrShow(t *testing.T) {
        var w           *httptest.ResponseRecorder

        t.Logf("Test[[$t.TitledName]]HndlrShow()...\n")
	    SetupParms(t)
        w = httptest.NewRecorder()

        req := httptest.NewRequest("GET", "http://localhost:5000/[[$t.TitledName]]", nil)
        [[$t.TitledName]]HndlrShow(w, req)
        resp := w.Result()
        // fmt.Println(resp.StatusCode)
        // fmt.Println(resp.Header.Get("Content-Type"))
        body, _ := ioutil.ReadAll(resp.Body)
        t.Logf("Output:\n%s\n\n\n", string(body))

	    t.Logf("Test[[$t.TitledName]]HndlrShow() - End of Test\n\n\n")
    }

    func Test[[$t.TitledName]]HndlrUpdate(t *testing.T) {
        var err         error

        t.Logf("Test[[$t.TitledName]]HndlrUpdate()...\n")
	    SetupParms(t)

        //err = db.Ping()
        if err != nil {
            log.Fatalln("Error: Cannot connect: ", err)
        }

	    t.Logf("Test[[$t.TitledName]]HndlrUpdate() - End of Test\n\n\n")
    }

[[ end ]]
