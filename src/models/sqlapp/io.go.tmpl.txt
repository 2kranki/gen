// vi:nu:et:sts=4 ts=4 sw=4
// See License.txt in main repository directory

// io[[.TD.Data.TitledName]] contains all the functions
// and data to interact with the SQL Database.

// Generated: [[Time]]
[[$td := .TD]]

package io[[.TD.Data.TitledName]]

import (
    "database/sql"
	"errors"
    "fmt"
    "log"
    [[if .TD.Data.HasFloat]]
        "strconv"
        "strings"
    [[end]]
	_ [[.TD.Data.Plugin.Plugin.GenImportString]]
	//"net/http"
	//"strconv"
)


var db          *sql.DB
var	dbName      string
var	dbPW       	string
var dbPort     	string
var dbServer    string
var dbUser     	string


//============================================================================
//                              Miscellaneous
//============================================================================

[[if GenDebugging]]
    func ErrorString(err error) string {
        if err == nil {
            return "ok"
        } else {
            return err.Error()
        }
    }
[[end]]

[[if .TD.Data.HasFloat]]

    func FloatToString(num float64) string {
        s := fmt.Sprintf("%.4f", num)
        return strings.TrimRight(strings.TrimRight(s, "0"), ".")
    }

    func StringToFloat(str string) float64 {
        var num float64
        num, _ = strconv.ParseFloat(str, 64)
        return num
    }

[[end]]

func Name() string {
    return dbName
}

func SetName(value string) {
   dbName = value
}

func Port() string {
   return dbPort
}

func SetPort(value string) {
   dbPort = value
}

func PW() string {
   return dbPW
}

func SetPW(value string) {
   dbPW = value
}

func Server() string {
   return dbServer
}

func SetServer(value string) {
   dbServer = value
}

func User() string {
   return dbServer
}

func SetUser(value string) {
   dbUser = value
}

// Connect connects the database/sql/driver to the appropriate
//database using the given parameters.
func Connect() error {
    var err         error

	[[.TD.Data.Plugin.Plugin.GenSqlOpen]]

    if err != nil {
        log.Fatalln("Error: Cannot Connect: ", err)
    }
    err = db.Ping()
    if err != nil {
        Disconnect( )
        log.Fatalln("Error: Cannot Ping: ", err)
    }

    [[if .TD.Data.Plugin.Plugin.CreateDatabase]]
        err = DatabaseCreate()
        if err != nil {
            Disconnect( )
            log.Fatalln("Error: Cannot Ping: ", err)
        }
    [[end]]

    [[if .TD.Data.Plugin.Plugin.NeedUse]]
        err = DatabaseUse()
        if err != nil {
            Disconnect( )
            log.Fatalln("Error: Cannot Ping: ", err)
        }
    [[end]]
    return nil
}

// Disconnect() cleans up anything that needs to be
// accomplished before the database is closed
// and then closes the database connection.
func Disconnect() error {
    var err         error

    [[if GenDebugging]]
        log.Printf("\tDisconnecting from Database\n")
    [[end]]
    if IsConnected() {
        err = db.Close()
        db = nil
    } else {
        err = errors.New("Error: Database was not connected!")
    }

    return err
}

func IsConnected() bool {
    if db != nil {
        return true
    }
    return false
}

//============================================================================
//                        Database Maintenance
//============================================================================

// DatabaseCreate creates the table in the
// given database deleting the current table if
// present.
func DatabaseCreate() error {
    var sqlStmt = "[[GenDatabaseCreateStmt .TD.Data]]"
    var err     error

    [[if GenDebugging]]
        log.Printf("DatabaseCreate()\n")
    [[end]]

    err = DatabaseDelete()
    if err != nil {
        [[if GenDebugging]]
            log.Printf("...end DatabaseCreate(Error:%s)\n", err.Error())
        [[end]]
        return err
    }
    _, err = db.Exec(sqlStmt)

    [[if GenDebugging]]
        log.Printf("...end DatabaseCreate(%s)\n", ErrorString(err))
    [[end]]
    return err
}

// DatabaseDelete deletes the table in the
// given database if present.
func DatabaseDelete() error {
    var sqlStmt = "[[GenDatabaseDeleteStmt .TD.Data]]"
    var err     error

    [[if GenDebugging]]
        log.Printf("DatabaseDelete()\n")
    [[end]]

    _, err = db.Exec(sqlStmt)

    [[if GenDebugging]]
        log.Printf("...end DatabaseDelete(%s)\n", ErrorString(err))
    [[end]]
    return err
}

// DatabaseUse issues the database USE command.
func DatabaseUse() error {
    var sql = "USE [[.TD.Data.TitledName]];"
    var err     error

    [[if GenDebugging]]
        log.Printf("DatabaseUse()\n")
    [[end]]

    _, err = db.Exec(sql)

    [[if GenDebugging]]
        log.Printf("...end DatabaseUse(%s)\n", ErrorString(err))
    [[end]]
    return err
}

//============================================================================
//                          Table Maintenance/Select
//============================================================================

func TablesCreate() error {
    var err         error

	[[range $t := .TD.Data.Tables -]]
        err = [[$t.TitledName]]TableCreate()
        if err != nil {
            log.Fatalln("Error: Cannot create table: ", err)
        }
	[[ end ]]

	return err
}

func TablesDelete() error {
    var err         error

	[[range $t := .TD.Data.Tables -]]
        err = [[$t.TitledName]]TableDelete()
        if err != nil {
            log.Fatalln("Error: Cannot delete table: ", err)
        }
	[[ end ]]

	return err
}
