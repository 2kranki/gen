// vi:nu:et:sts=4 ts=4 sw=4
// See License.txt in main repository directory

// io[[.TD.Data.TitledName]] contains all the methods for
// manipulating an SQL Database such as connections, database
// creation and deletion if needed. It does not include the
// specific Table Maintenance Methods. Those are maintained
// in separate packages.

// Generated: [[Time]]
[[- $dot := .]]
[[- $d  := .TD.Data]]
[[- $dn := .TD.Data.TitledName]]

package io[[$dn]]

import (
    "database/sql"
	"errors"
    "fmt"
    [[if GenDebugging]]
        "log"
    [[end]]
     [[if $d.HasFloat]]
        "strconv"
        "strings"
    [[end]]
	_ [[$d.Plugin.Plugin.GenImportString]]
)


//============================================================================
//                            IO_[[$dn]]
//============================================================================

type IO_[[$dn]] struct {
    dbSql       *sql.DB
    dbName      string
    dbPW       	string
    dbPort     	string
    dbServer    string
    dbUser     	string
}

func (io *IO_[[$dn]]) Name () string {
    return io.dbName
}
func (io *IO_[[$dn]]) SetName (str string) {
    io.dbName = str
}

func (io *IO_[[$dn]]) PW () string {
    return io.dbPW
}
func (io *IO_[[$dn]]) SetPW (str string) {
    io.dbPW = str
}

func (io *IO_[[$dn]]) Port () string {
    return io.dbPort
}
func (io *IO_[[$dn]]) SetPort (str string) {
    io.dbPort = str
}

func (io *IO_[[$dn]]) Server () string {
    return io.dbServer
}
func (io *IO_[[$dn]]) SetServer (str string) {
    io.dbServer = str
}

func (io *IO_[[$dn]]) Sql () *sql.DB {
    return io.dbSql
}

func (io *IO_[[$dn]]) User () string {
    return io.dbUser
}
func (io *IO_[[$dn]]) SetUser (str string) {
    io.dbUser = str
}

//============================================================================
//                              Miscellaneous
//============================================================================

[[if GenDebugging]]
    func ErrorString(err error) string {
        if err == nil {
            return "ok"
        } else {
            return err.Error()
        }
    }
[[end]]

[[if $d.HasFloat]]

    func FloatToString(num float64) string {
        s := fmt.Sprintf("%.4f", num)
        return strings.TrimRight(strings.TrimRight(s, "0"), ".")
    }

    func StringToFloat(str string) float64 {
        var num float64
        num, _ = strconv.ParseFloat(str, 64)
        return num
    }

[[end]]

// Set up default parameters for the needed SQL Type.
func (io *IO_[[$dn]]) DefaultParms() {
	[[ if eq $d.SqlType "mariadb" ]]
		io.SetPort("4306")
		io.SetPW("Passw0rd!")
		io.SetServer("127.0.0.1")
		io.SetUser("root")
	[[ else if eq $d.SqlType  "mssql" ]]
		io.SetPort("1401")
		io.SetPW("Passw0rd!")
		io.SetServer("localhost")
		io.SetUser("SA")
	[[ else if eq $d.SqlType "mysql" ]]
		io.SetPort("3306")
		io.SetPW("Passw0rd!")
		io.SetServer("127.0.0.1")
		io.SetUser("root")
	[[ else if eq $d.SqlType "postgres" ]]
		io.SetPort("5432")
		io.SetPW("Passw0rd!")
		io.SetServer("localhost")
		io.SetUser("postgres")
	[[ else if eq $d.SqlType "sqlite" ]]
		io.SetName("test.db")
	[[ end ]]
}

//============================================================================
//                              Database Methods
//============================================================================

// Connect connects the database/sql/driver to the appropriate
//database using the given parameters.
func (io *IO_[[$dn]]) Connect() error {
    var err         error

	[[$d.Plugin.Plugin.GenSqlOpen "io.dbSql" "io.dbServer" "io.dbPort" "io.dbUser" "io.dbPW" "io.dbName"]]

    if err != nil {
        log.Fatalln("Error: Cannot Connect: ", err)
    }
    err = io.dbSql.Ping()
    if err != nil {
        io.Disconnect( )
        log.Fatalln("Error: Cannot Ping: ", err)
    }

    [[if $d.Plugin.Plugin.CreateDatabase]]
        err = io.DatabaseCreate()
        if err != nil {
            io.Disconnect( )
            log.Fatalln("Error: Cannot Ping: ", err)
        }
    [[end]]

    [[if $d.Plugin.Plugin.NeedUse]]
        err = io.DatabaseUse()
        if err != nil {
            io.Disconnect( )
            log.Fatalln("Error: Cannot Ping: ", err)
        }
    [[end]]
    return nil
}

// Disconnect() cleans up anything that needs to be
// accomplished before the database is closed
// and then closes the database connection.
func (io *IO_[[$dn]]) Disconnect() error {
    var err         error

    [[if GenDebugging]]
        log.Printf("\tDisconnecting from Database\n")
    [[end]]
    if io.IsConnected() {
        err = io.dbSql.Close()
        io.dbSql = nil
    } else {
        err = errors.New("Error: Database was not connected!")
    }

    return err
}

func (io *IO_[[$dn]]) IsConnected() bool {
    if io.dbSql != nil {
        return true
    }
    return false
}

//============================================================================
//                        Database Maintenance
//============================================================================

// DatabaseCreate creates the table in the
// given database deleting the current table if
// present.
func (io *IO_[[$dn]]) DatabaseCreate() error {
    var sqlStmt = "[[GenDatabaseCreateStmt $d]]"
    var err     error

    [[if GenDebugging]]
        log.Printf("DatabaseCreate()\n")
    [[end]]

    err = io.DatabaseDelete()
    if err != nil {
        [[if GenDebugging]]
            log.Printf("...end DatabaseCreate(Error:%s)\n", err.Error())
        [[end]]
        return err
    }
    _, err = io.dbSql.Exec(sqlStmt)

    [[if GenDebugging]]
        log.Printf("...end DatabaseCreate(%s)\n", ErrorString(err))
    [[end]]
    return err
}

// DatabaseDelete deletes the table in the
// given database if present.
func (io *IO_[[$dn]]) DatabaseDelete() error {
    var sqlStmt = "[[GenDatabaseDeleteStmt $d]]"
    var err     error

    [[if GenDebugging]]
        log.Printf("DatabaseDelete()\n")
    [[end]]

    _, err = io.dbSql.Exec(sqlStmt)

    [[if GenDebugging]]
        log.Printf("...end DatabaseDelete(%s)\n", ErrorString(err))
    [[end]]
    return err
}

// DatabaseUse issues the database USE command.
func (io *IO_[[$dn]]) DatabaseUse() error {
    var sql = "USE [[$dn]];"
    var err     error

    [[if GenDebugging]]
        log.Printf("DatabaseUse()\n")
    [[end]]

    _, err = io.dbSql.Exec(sql)

    [[if GenDebugging]]
        log.Printf("...end DatabaseUse(%s)\n", ErrorString(err))
    [[end]]
    return err
}

//----------------------------------------------------------------------------
//                                  New
//----------------------------------------------------------------------------

// New creates a new struct.
func [[$dn]]New() *IO_[[$dn]] {
    db := &IO_[[$dn]]{}
    return db
}

