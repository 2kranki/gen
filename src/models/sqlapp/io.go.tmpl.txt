// vi:nu:et:sts=4 ts=4 sw=4
// See License.txt in main repository directory

// io[[.TD.Data.TitledName]] contains all the methods for
// manipulating an SQL Database such as connections, database
// creation and deletion if needed. It does not include the
// specific Table Maintenance Methods. Those are maintained
// in separate packages.

[[- $dot := .]]
[[- $d   := .TD.Data]]
[[- $dn  := .TD.Data.TitledName]]
[[- $plg := $d.Plugin.Plugin]]
[[- $typ := $plg.Name]]

// Generated: [[Time]] for [[$typ]] Database

package io[[$dn]]

import (
    "database/sql"
    "fmt"
    [[if GenDebugging]]
        "log"
    [[end]]
    [[ if eq $typ "mssql" -]]
        "net/url"
    [[end]]
     [[if $d.HasFloat]]
        "strconv"
        "strings"
    [[end]]
	_ [[$d.Plugin.Plugin.GenImportString]]
)

[[$d.Plugin.Plugin.GenHeader]]

//============================================================================
//                            IO_[[$dn]]
//============================================================================

type IO_[[$dn]] struct {
    dbSql       *sql.DB
    dbName      string
    dbPW       	string
    dbPort     	string
    dbServer    string
    dbUser     	string
}

func (io *IO_[[$dn]]) Name() string {
    return io.dbName
}
func (io *IO_[[$dn]]) SetName(str string) {
    io.dbName = str
}

func (io *IO_[[$dn]]) PW() string {
    return io.dbPW
}
func (io *IO_[[$dn]]) SetPW(str string) {
    io.dbPW = str
}

func (io *IO_[[$dn]]) Port() string {
    return io.dbPort
}
func (io *IO_[[$dn]]) SetPort(str string) {
    io.dbPort = str
}

func (io *IO_[[$dn]]) Server() string {
    return io.dbServer
}
func (io *IO_[[$dn]]) SetServer(str string) {
    io.dbServer = str
}

func (io *IO_[[$dn]]) Sql() *sql.DB {
    return io.dbSql
}

func (io *IO_[[$dn]]) User() string {
    return io.dbUser
}
func (io *IO_[[$dn]]) SetUser(str string) {
    io.dbUser = str
}

//============================================================================
//                              Miscellaneous
//============================================================================

[[if GenDebugging]]
    func ErrorString(err error) string {
        if err == nil {
            return "ok"
        } else {
            return err.Error()
        }
    }
[[end]]

[[if $d.HasFloat]]

    func FloatToString(num float64) string {
        s := fmt.Sprintf("%.4f", num)
        return strings.TrimRight(strings.TrimRight(s, "0"), ".")
    }

    func StringToFloat(str string) float64 {
        var num float64
        num, _ = strconv.ParseFloat(str, 64)
        return num
    }

[[end]]

// Set up default parameters for the needed SQL Type.
func (io *IO_[[$dn]]) DefaultParms() {
		io.SetPort("[[$d.Plugin.Plugin.DefaultPort]]")
		io.SetPW("[[$d.Plugin.Plugin.DefaultPW]]")
		io.SetServer("[[$d.Plugin.Plugin.DefaultServer]]")
		io.SetUser("[[$d.Plugin.Plugin.DefaultUser]]")
		io.SetName("[[$d.Plugin.Plugin.DefaultDatabase $d]]")
}

//============================================================================
//                              Database Methods
//============================================================================

//----------------------------------------------------------------------------
//								Connect
//----------------------------------------------------------------------------

// Connect connects the database/sql/driver to the appropriate
//database using the given parameters.
func (io *IO_[[$dn]]) Connect() error {
    var err         error

	[[$d.Plugin.Plugin.GenSqlOpen "io.dbSql" "io.dbServer" "io.dbPort" "io.dbUser" "io.dbPW" "io.dbName"]]
    if err != nil {
        return fmt.Errorf("Error: Cannot Connect: %s\n", err.Error())
    }

    [[if GenDebugging]]
        log.Printf("Pinging Server...\n")
    [[end]]
    err = io.dbSql.Ping()
    if err != nil {
        io.Disconnect( )
        return fmt.Errorf("Ping Error: Cannot Ping: %s\n", err.Error())
    }

    [[if $d.Plugin.Plugin.CreateDatabase]]
        [[if GenDebugging]]
            log.Printf("Creating Database...\n")
        [[end]]
        err = io.DatabaseCreate()
        if err != nil {
            io.Disconnect( )
            return fmt.Errorf("Error: Cannot Create Database: %s\n", err.Error())
        }
    [[end]]

    [[if $d.Plugin.Plugin.NeedUse]]
        [[if GenDebugging]]
            log.Printf("Issuing Database USE...\n")
        [[end]]
        err = io.DatabaseUse("")
        if err != nil {
            io.Disconnect( )
            return fmt.Errorf("Error: Cannot USE: %s\n", err.Error())
        }
    [[end]]

    return nil
}

//----------------------------------------------------------------------------
//								Disconnect
//----------------------------------------------------------------------------

// Disconnect() cleans up anything that needs to be
// accomplished before the database is closed
// and then closes the database connection.
func (io *IO_[[$dn]]) Disconnect() error {
    var err         error

    [[if GenDebugging]]
        log.Printf("\tDisconnecting from Database\n")
    [[end]]
    if io.IsConnected() {
        err = io.dbSql.Close()
        io.dbSql = nil
    } else {
        err = fmt.Errorf("Error: Database was not connected!")
    }

    return err
}

//----------------------------------------------------------------------------
//								IsConnected
//----------------------------------------------------------------------------

func (io *IO_[[$dn]]) IsConnected() bool {
    if io.dbSql != nil {
        return true
    }
    return false
}

//============================================================================
//                        Database Maintenance
//============================================================================

//----------------------------------------------------------------------------
//								Create
//----------------------------------------------------------------------------

// DatabaseCreate creates the database within the SQL server.
func (io *IO_[[$dn]]) DatabaseCreate() error {
    var err     error
    [[ if ne $typ "sqlite" -]]
        var sqlStmt = "[[GenDatabaseDeleteStmt $d]]"
    [[- end ]]

    [[if GenDebugging]]
        log.Printf("DatabaseCreate()\n")
    [[end]]

    // Create the database.
    [[ if ne $typ "sqlite" -]]
        if !io.IsDatabaseDefined() {
            err = io.Exec(sqlStmt)
        }
    [[- end ]]

    [[if GenDebugging]]
        log.Printf("...end DatabaseCreate(%s)\n", ErrorString(err))
    [[end]]
    return err
}

//----------------------------------------------------------------------------
//								Delete
//----------------------------------------------------------------------------

// DatabaseDelete deletes the table in the
// given database if present.
func (io *IO_[[$dn]]) DatabaseDelete() error {
    var err     error
    [[ if ne $typ "sqlite" -]]
        var sqlStmt = "[[GenDatabaseDeleteStmt $d]]"
    [[- end ]]

    [[if GenDebugging]]
        log.Printf("DatabaseDelete()\n")
    [[end]]

    [[ if ne $typ "sqlite" -]]
        if !io.IsDatabaseDefined() {
            err = io.Exec(sqlStmt)
        }
    [[- end ]]

    [[if GenDebugging]]
        log.Printf("...end DatabaseDelete(%s)\n", ErrorString(err))
    [[end]]
    return err
}

//----------------------------------------------------------------------------
//								    Use
//----------------------------------------------------------------------------

// DatabaseUse issues the database USE command.
func (io *IO_[[$dn]]) DatabaseUse(dbName string) error {
    var err     error

    [[if GenDebugging]]
        log.Printf("DatabaseUse()\n")
    [[end]]

    [[ if ne $typ "sqlite" -]]
        name := io.Name()
        if len(dbName) > 0 {
            name = dbName
        }
        err = io.Exec(fmt.Sprintf("USE %s;\n", name))
    [[- end ]]

    [[if GenDebugging]]
        log.Printf("...end DatabaseUse(%s)\n", ErrorString(err))
    [[end]]
    return err
}

[[ if eq $typ "mssql" -]]
//----------------------------------------------------------------------------
//						IsDatabaseDefined - mssql
//----------------------------------------------------------------------------

// IsDatabaseDefined checks to see if the Database is already defined to the
// SQL server.
func (io *IO_[[$dn]]) IsDatabaseDefined() bool {
    var sqlStmt = "SELECT name FROM sys.databases WHERE name = N'[[$dn]]';"
    var err     error
    var row     *sql.Row
    var name    string

    [[if GenDebugging]]
        log.Printf("IsDatabaseDefined()\n")
    [[end]]

    row = io.dbSql.QueryRow(sqlStmt)
    err = row.Scan(&name)
	if err == nil {
        if name == "[[$dn]]" {
        [[if GenDebugging]]
            log.Printf("...end IsDatabaseDefined(true)\n")
        [[end]]
            return true;
        }
    [[if GenDebugging]]
	} else {
	        log.Printf("\tSELECT Error: %s  Name: %s\n", err.Error(), name)
    [[end]]
	}

    [[if GenDebugging]]
        log.Printf("...end IsDatabaseDefined(false)\n")
    [[end]]
    return false
}

//----------------------------------------------------------------------------
//								ErrChk - mssql
//----------------------------------------------------------------------------

// ErrChk updates errors from mssql with other information provided.
func (io *IO_[[$dn]]) ErrChk(err error) error {

    [[if GenDebugging]]
        log.Printf("ErrChk(%s)\n", ErrorString(err))
    [[end]]

    if err != nil {
		extra, ok := err.(ErrorWithExtraInfo)
		if ok {
			errNo  := int(extra.SQLErrorNumber())
			lineNo := int(extra.SQLErrorLineNo())
			err = fmt.Errorf("Error: %d  Line: %d - %s\n", errNo, lineNo, err.Error())
		}
    }

    [[if GenDebugging]]
        log.Printf("...end ErrChk(%s)\n", ErrorString(err))
    [[end]]
    return err
}

[[ else if eq $typ "sqlite" -]]
//----------------------------------------------------------------------------
//						IsDatabaseDefined - sqlite
//----------------------------------------------------------------------------

// IsDatabaseDefined checks to see if the Database is already defined to the SQL server.
// This is not needed in SQLite. So, we just return true.
func (io *IO_[[$dn]]) IsDatabaseDefined() bool {

    [[if GenDebugging]]
        log.Printf("IsDatabaseDefined()\n")
    [[end]]

    [[if GenDebugging]]
        log.Printf("...end IsDatabaseDefined(false)\n")
    [[end]]
    return true
}
[[- end ]]

//----------------------------------------------------------------------------
//								    Exec
//----------------------------------------------------------------------------

// Exec executes an sql statement which does not return any rows.
func (io *IO_[[$dn]]) Exec(sqlStmt string, args ...interface{}) error {
    var err     error

    [[if GenDebugging]]
        log.Printf("Exec(%s)\n", sqlStmt)
    [[end]]

    _, err = io.dbSql.Exec(sqlStmt, args...)
    [[ if eq $typ "mssql" -]]
        err = io.ErrChk(err)
    [[- end ]]

    [[if GenDebugging]]
        log.Printf("...end Exec(%s)\n", ErrorString(err))
    [[end]]
    return err
}

//----------------------------------------------------------------------------
//								    Query
//----------------------------------------------------------------------------

// Query executes an sql statement which does return row(s).
func (io *IO_[[$dn]]) Query(sqlStmt string, process func(rows *sql.Rows), args ...interface{}) error {
    var err     error
    var rows    *sql.Rows

    [[if GenDebugging]]
        log.Printf("Query(%s)\n", sqlStmt)
    [[end]]

    rows, err = io.dbSql.Query(sqlStmt, args...)
    [[ if eq $typ "mssql" -]]
        err = io.ErrChk(err)
    [[- end ]]
    if err == nil {
        defer rows.Close()
        // Process the rows
        for rows.Next() {
            process(rows)
        }
        err = rows.Close()
    }

    [[if GenDebugging]]
        log.Printf("...end Query(%s)\n", ErrorString(err))
    [[end]]
    return err
}

//----------------------------------------------------------------------------
//								    QueryRow
//----------------------------------------------------------------------------

// QueryRow executes an sql statement which does return row(s).
func (io *IO_[[$dn]]) QueryRow(sqlStmt string, args ...interface{}) *sql.Row {
    var err     error
    var row     *sql.Row

    [[if GenDebugging]]
        log.Printf("QueryRow(%s)\n", sqlStmt)
    [[end]]

    row = io.dbSql.QueryRow(sqlStmt, args...)

    [[ if eq $typ "mssql" -]]
        err = io.ErrChk(err)
    [[- end ]]

    [[if GenDebugging]]
        log.Printf("...end Query(%s)\n", ErrorString(err))
    [[end]]
    return row
}

[[$d.Plugin.Plugin.GenTrailer]]


//----------------------------------------------------------------------------
//                                  [[$dn]]New
//----------------------------------------------------------------------------

// New creates a new struct.
func [[$dn]]New() *IO_[[$dn]] {
    db := &IO_[[$dn]]{}
    return db
}

