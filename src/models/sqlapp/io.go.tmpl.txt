// vi:nu:et:sts=4 ts=4 sw=4
// See License.txt in main repository directory

// io[[.TD.Data.TitledName]] contains all the functions
// and data to interact with the SQL Database.

// Generated: [[Time]]

package io[[.TD.Data.TitledName]]

import (
    "database/sql"
	"errors"
    "fmt"
    "log"
    [[if .TD.Data.HasFloat]]
        "strconv"
        "strings"
    [[end]]
	[[ if eq .TD.Data.SqlType "mariadb" ]]
		ERROR - NOT IMPLEMENTED
	[[ else if eq .TD.Data.SqlType  "mssql" ]]
	_ "github.com/denisenkom/go-mssqldb"
	[[ else if eq .TD.Data.SqlType "mysql" ]]
		_ "github.com/go-sql-driver/mysql"
	[[ else if eq .TD.Data.SqlType "postgres" ]]
		_ "github.com/lib/pq"
	[[ else if eq .TD.Data.SqlType "sqlite" ]]
	    _ "github.com/mattn/go-sqlite3"
	[[ end ]]
	//"net/http"
	//"strconv"
)


var db          *sql.DB
var	dbName      string
var	dbPW       	string
var dbPort     	string
var dbServer    string
var dbUser     	string


[[if GenDebugging]]
    func ErrorString(err error) string {
        if err == nil {
            return "ok"
        } else {
            return err.Error()
        }
    }
[[end]]

[[if .TD.Data.HasFloat]]

    func FloatToString(num float64) string {
        s := fmt.Sprintf("%.4f", num)
        return strings.TrimRight(strings.TrimRight(s, "0"), ".")
    }

    func StringToFloat(str string) float64 {
        var num float64
        num, _ = strconv.ParseFloat(str, 64)
        return num
    }

[[end]]


func Connect() error {
    var err         error

	[[ if eq .TD.Data.SqlType "mariadb" ]]
		ERROR - NOT IMPLEMENTED
	[[ else if eq .TD.Data.SqlType "mssql" ]]
	    connStr := fmt.Sprintf("sqlserver://%s:%s@%s:%s?database=%s&connection+timeout=30",
	                            dbUser,dbPW,dbServer,dbPort,dbName)
        [[if GenDebugging]]
            log.Printf("\tConnecting to %s\n", connStr)
        [[end]]
	    db, err := sql.Open("mssql", connStr)
	[[ else if eq .TD.Data.SqlType "mysql" ]]
		ERROR - NOT IMPLEMENTED
	[[ else if eq .TD.Data.SqlType "postgres" ]]
	    connStr := fmt.Sprintf("user=%s password=%s host=%s port=%s dbname=%s sslmode=disable",
	                            dbUser,dbPW,dbServer,dbPort,"[[.TD.Data.TitledName]]")
        [[if GenDebugging]]
            log.Printf("\tConnecting to %s\n", connStr)
        [[end]]
        db, err = sql.Open("postgres", connStr)
	[[ else if eq .TD.Data.SqlType "sqlite" ]]
	    connStr := fmt.Sprintf("%s", dbServer)
        [[if GenDebugging]]
            log.Printf("\tConnecting to %s\n", connStr)
        [[end]]
	    db, err = sql.Open("sqlite3", connStr)
	[[ end ]]
    if err != nil {
        log.Fatalln("Error: Cannot Connect: ", err)
    }
    err = db.Ping()
    if err != nil {
        Disconnect( )
        log.Fatalln("Error: Cannot Ping: ", err)
    }

    return nil
}

// Disconnect() cleans up anything that needs to be
// accomplished before the database is closed
// and then closes the database connection.
func Disconnect() error {
    var err         error

    [[if GenDebugging]]
        log.Printf("\tDisconnecting from Database\n")
    [[end]]
    if IsConnected() {
        err = db.Close()
        db = nil
    } else {
        err = errors.New("Error: Database was not connected!")
    }

    return err
}

func IsConnected() bool {
    if db != nil {
        return true
    }
    return false
}

func TablesCreate() error {
    var err         error

	[[range $t := .TD.Data.Tables -]]
        err = [[$t.TitledName]]TableCreate()
        if err != nil {
            log.Fatalln("Error: Cannot create table: ", err)
        }
	[[ end ]]

	return err
}

func TablesDelete() error {
    var err         error

	[[range $t := .TD.Data.Tables -]]
        err = [[$t.TitledName]]TableDelete()
        if err != nil {
            log.Fatalln("Error: Cannot delete table: ", err)
        }
	[[ end ]]

	return err
}

func Name() string {
    return dbName
}

func SetName(value string) {
   dbName = value
}

func Port() string {
   return dbPort
}

func SetPort(value string) {
   dbPort = value
}

func PW() string {
   return dbPW
}

func SetPW(value string) {
   dbPW = value
}

func Server() string {
   return dbServer
}

func SetServer(value string) {
   dbServer = value
}

func User() string {
   return dbServer
}

func SetUser(value string) {
   dbUser = value
}
