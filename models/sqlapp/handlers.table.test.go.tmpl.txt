// vi:nu:et:sts=4 ts=4 sw=4
// See License.txt in main repository directory

// io[[.TD.Data.TitledName]] contains all the functions
// and data to interact with the SQL Database.

// Generated: [[Time]]
[[- $dot := .]]
[[- $d  := .TD.Data]]
[[- $dn := .TD.Data.TitledName]]
[[- $t := .Table]]
[[- $tn := .Table.TitledName]]

package hndlr[[$dn]][[$tn]]

import (
    "fmt"
    "io/ioutil"
    "net/http"
    "net/http/httptest"
    "strings"
	"testing"

    "github.com/2kranki/go_util"
	"[[$d.Name]]/pkg/[[$dn]][[$tn]]"
	"[[$d.Name]]/pkg/hndlr[[$dn]]"
	"[[$d.Name]]/pkg/io[[$dn]]"
	"[[$d.Name]]/pkg/io[[$dn]][[$tn]]"
)

//============================================================================
//                          [[$dn]][[$tn]]TestData
//============================================================================

type [[$dn]][[$tn]]TestData struct {
    T           *testing.T
    Port        string
    PW          string
    Server      string
    User        string
    NameDB      string
    io          *io[[$dn]].IO_[[$dn]]
}

//----------------------------------------------------------------------------
//                            Check Status Code
//----------------------------------------------------------------------------

// CheckRcd compares the given record to the needed one and issues an error if
// they do not match.
func (td *[[$dn]][[$tn]]TestData) CheckRcd(need int, rcd *[[$dn]][[$tn]].[[$dn]][[$tn]]) {
    var rcd2        [[$dn]][[$tn]].[[$dn]][[$tn]]

    rcd2.TestData(need)

    if rcd.Compare(&rcd2) != 0 {
        td.T.Fatalf("Error: Record Mismatch: needed:%+v have:%+v\n", rcd2, rcd)
    }

}

//----------------------------------------------------------------------------
//                             Disconnect
//----------------------------------------------------------------------------

// Disconnect disconnects the io[[$dn]] server.
func (td *[[$dn]][[$tn]]TestData) Disconnect() {
    var err         error

    err = td.io.Disconnect()
    if err != nil {
        td.T.Fatalf("Error: Disconnect Failure: %s\n", err.Error())
    }

}

//----------------------------------------------------------------------------
//                             Set up
//----------------------------------------------------------------------------

// Setup initializes the Test Data.
// If it fails at something, it must issue a t.Fatalf().
func (td *[[$dn]][[$tn]]TestData) Setup(t *testing.T) {

    td.T = t
    td.SetupDB()

}

//----------------------------------------------------------------------------
//                             Set up DB
//----------------------------------------------------------------------------

// SetupDB initializes the DB with test records.
// If it fails at something, it must issue a t.Fatalf().
func (td *[[$dn]][[$tn]]TestData) SetupDB( ) {
    var err         error

    // Set connection parameters based on database SQL type.
    td.io = io[[$dn]].NewIo[[$dn]]()
    td.io.DefaultParms()
    err = td.io.DatabaseCreate("[[$dn]]")
    if err != nil {
        td.T.Fatalf("Error: Creation Failure: %s\n", err.Error())
    }

}

//----------------------------------------------------------------------------
//                                  New
//----------------------------------------------------------------------------

// New creates a new io struct.
func NewTest[[$dn]][[$tn]]() *[[$dn]][[$tn]]TestData {
    td := [[$dn]][[$tn]]TestData{}
    return &td
}

//----------------------------------------------------------------------------
//                          TestData_[[$dn]][[$tn]]
//----------------------------------------------------------------------------

type TestData_[[$dn]][[$tn]] struct {
    T           *testing.T
    bt          *[[$dn]][[$tn]]TestData
    db          *io[[$dn]][[$tn]].IO_[[$dn]][[$tn]]
    H           *Handlers[[$dn]][[$tn]]
    Mux         *http.ServeMux
    w           *httptest.ResponseRecorder
    Req         *http.Request
    Resp        *http.Response
    tmpls       *hndlr[[$dn]].Tmpls[[$dn]]
}

//----------------------------------------------------------------------------
//                            Check Status Code
//----------------------------------------------------------------------------

// CheckStatus checks the request status code for a specific status.
// If it fails at something, it must issue a t.Fatalf().
func (td *TestData_[[$dn]][[$tn]]) CheckStatus(status int) {

    [[if GenDebugging]]
        td.T.Logf("[[$tn]].CheckStatus()\n")
    [[end]]
    if td.Resp == nil {
        td.T.Fatalf("Error: Missing HTTP Response\n")
    }

    if td.Resp.StatusCode != status {
        td.T.Fatalf("Error: Invalid Status Code of %d, needed %d\n", td.Resp.StatusCode, status)
    }

    [[if GenDebugging]]
        td.T.Logf("...end [[$tn]].Setup\n")
    [[end]]
}

//----------------------------------------------------------------------------
//                              GET Request
//----------------------------------------------------------------------------

// GetReq initializes the http.Request for a GET.
// If it fails at something, it must issue a t.Fatalf().
func (td *TestData_[[$dn]][[$tn]]) GetReq(target string, body string) {

    [[if GenDebugging]]
        td.T.Logf("[[$tn]].Setup()\n")
    [[end]]
    if target == "" {
        td.T.Fatalf("Error: Missing Target String\n")
    }

    td.Req = httptest.NewRequest(http.MethodGet, target, strings.NewReader(body))
    td.ServeHttp()          // Perform the test through the mux.

    [[if GenDebugging]]
        td.T.Logf("...end [[$tn]].Setup\n")
    [[end]]
}

//----------------------------------------------------------------------------
//                            POST Request
//----------------------------------------------------------------------------

// SetupPostReq initializes the http.Request for a POST.
// If it fails at something, it must issue a t.Fatalf().
func (td *TestData_[[$dn]][[$tn]]) PostReq(target string, body string) {

    [[if GenDebugging]]
        td.T.Logf("[[$tn]].Setup()\n")
    [[end]]

    td.Req = httptest.NewRequest(http.MethodPost, target, strings.NewReader(body))
    td.Req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
    td.ServeHttp()          // Perform the test through the mux.

    [[if GenDebugging]]
        td.T.Logf("...end [[$tn]].Setup\n")
    [[end]]
}

//----------------------------------------------------------------------------
//                            Response Body
//----------------------------------------------------------------------------

// ResponseBody returns the response body converted to a string.
// If it fails at something, it must issue a t.Fatalf().
func (td *TestData_[[$dn]][[$tn]]) ResponseBody() string {
    var str     string

    [[if GenDebugging]]
        td.T.Logf("[[$tn]].ResponseBody()\n")
    [[end]]
    if td.Resp == nil {
        td.T.Fatalf("Error: Missing HTTP Response\n")
    }

    body, err := ioutil.ReadAll(td.Resp.Body)
    if err != nil {
        td.T.Fatal(err)
    }
    str = string(body)
    td.T.Logf("\tResponse Body: %s\n", body)

    [[if GenDebugging]]
        td.T.Logf("...end [[$tn]].ResponseBody\n")
    [[end]]
    return str
}

//----------------------------------------------------------------------------
//                             Serve HTTP
//----------------------------------------------------------------------------

// ServeHttp executes the handler through the mux.
// If it fails at something, it must issue a t.Fatalf().
func (td *TestData_[[$dn]][[$tn]]) ServeHttp( ) {

    [[if GenDebugging]]
        td.T.Logf("[[$tn]].ServeHttp()\n")
    [[end]]

    td.w = httptest.NewRecorder()
    td.Mux.ServeHTTP(td.w, td.Req)
    td.Resp = td.w.Result()

    [[if GenDebugging]]
        td.T.Logf("...end [[$tn]].ServeHttp\n")
    [[end]]
}

//----------------------------------------------------------------------------
//                             Set up
//----------------------------------------------------------------------------

// Setup initializes the Test Data.
// If it fails at something, it must issue a t.Fatalf().
func (td *TestData_[[$dn]][[$tn]]) Setup(t *testing.T) {

    td.T = t
    td.SetupIO()
    td.SetupHandlers()

}

//----------------------------------------------------------------------------
//                             Set up I/O
//----------------------------------------------------------------------------

// SetupFakeDB initializes the DB with 2 records.
// If it fails at something, it must issue a t.Fatalf().
func (td *TestData_[[$dn]][[$tn]]) SetupIO( ) {
    var err         error
    var rcd         [[$dn]][[$tn]].[[$dn]][[$tn]]

    td.bt = NewTest[[$dn]][[$tn]]()
    if td.bt == nil {
        td.T.Fatalf("Error: Unable to allocate io[[$dn]] Test!\n")
    } else {
        td.bt.Setup(td.T)
    }

    td.db = io[[$dn]][[$tn]].NewIo[[$dn]][[$tn]](td.bt.io)
    if td.db == nil {
        td.T.Fatalf("Error: Unable to allocate FakeDB!\n")
    }

    err = td.db.TableDelete()
    if err != nil {
        td.T.Fatalf("Error: Table Deletion Failure: %s\n\n\n", err.Error())
    }

    err = td.db.TableCreate()
    if err != nil {
        td.T.Fatalf("Error: Cannot create table: %s\n\n\n", err)
    }

    for i:=0; i<2; i++ {
        rcd.TestData(i)
        err = td.db.RowInsert(&rcd)
        if err != nil {
            td.T.Fatalf("Error: Insert %d Failed: %s \n", i, util.ErrorString(err))
        }
    }

}

//----------------------------------------------------------------------------
//                             Set up Handlers
//----------------------------------------------------------------------------

// SetupHandlers initializes HTTP Test Handlers.
// If it fails at something, it must issue a t.Fatalf().
func (td *TestData_[[$dn]][[$tn]]) SetupHandlers( ) {

	// Set up main Handler which parses the templates.
    td.tmpls = hndlr[[$dn]].NewTmpls[[$dn]]("../../tmpl")
    td.tmpls.SetupTmpls()

    // Set up the Handler object.
    td.H = &Handlers[[$dn]][[$tn]]{db:td.db, rowsPerPage:2}
    if td.H == nil {
        td.T.Fatalf("Error: Unable to allocate Handlers\n")
    }

    // Now set up the Server mux for the test.
    td.Mux = http.NewServeMux()
    if td.Mux == nil {
        td.T.Fatalf("Error: Unable to allocate HTTP mux\n")
    }
    td.H.SetupHandlers(td.Mux)

}

//============================================================================
//                              Tests
//============================================================================

//----------------------------------------------------------------------------
//                          DB
//----------------------------------------------------------------------------

func Test[[$dn]][[$tn]]HndlrDB(t *testing.T) {
    var err         error
    var td          *TestData_[[$dn]][[$tn]]
    var rcd         [[$dn]][[$tn]].[[$dn]][[$tn]]
    var rcd2        [[$dn]][[$tn]].[[$dn]][[$tn]]

    t.Logf("Test[[$tn]].DB()...\n")
    td = &TestData_[[$dn]][[$tn]]{}
    td.Setup(t)

    t.Logf("\tChecking First()...\n")
    if err = td.db.RowFirst(&rcd2); err != nil {
        t.Fatalf("Error - Read First failed: %s\n", err.Error())
    }
    rcd.TestData(0)
    if 0 != rcd.CompareKeys(&rcd2) {
        t.Fatalf("Error - First did not work, need A, got %+v\n", rcd2)
    }

    t.Logf("Test[[$tn]].DB() - End of Test\n\n\n")
}

//----------------------------------------------------------------------------
//                             List Index
//----------------------------------------------------------------------------

func Test[[$dn]][[$tn]]HndlrListIndex(t *testing.T) {
    var err         error
    var td          *TestData_[[$dn]][[$tn]]
    //var r           string

    t.Logf("Test[[$tn]].HndlrListIndex()...\n")
    td = &TestData_[[$dn]][[$tn]]{}
    td.Setup(t)

    if err != nil {
        t.Fatalf("Error: Cannot connect: %s\n", err.Error())
    }

    // Issue a request for ???.
    //TODO: Create a first() request followed by next()'s'.

    // Check response.
    /*TODO: Uncomment when requests are actually being performed.
    r = td.ResponseBody()
    if r != "" {
        t.Logf("\t%s\n", r)
    }
    */

    // Parse response to verify
    //TODO: Parse the response.

    t.Logf("Test[[$tn]].HndlrListIndex() - End of Test\n\n\n")
}

//----------------------------------------------------------------------------
//                             List Show
//----------------------------------------------------------------------------

func Test[[$dn]][[$tn]]HndlrListShow(t *testing.T) {
    var td          *TestData_[[$dn]][[$tn]]

    t.Logf("TestListShow()...\n")
    td = &TestData_[[$dn]][[$tn]]{}
    td.Setup(t)

    // First try a blank record.
    //TODO: Perform Show()

    // Get the response.
    //TODO: get the response with initial error checking.

    // Parse response to verify
    //TODO: Parse the response.

    t.Logf("TestListShow() - End of Test\n\n\n")
}

//----------------------------------------------------------------------------
//                             Row Delete
//----------------------------------------------------------------------------

func Test[[$dn]][[$tn]]HndlrRowDelete(t *testing.T) {
    var err         error
    var td          *TestData_[[$dn]][[$tn]]
    var rcd         [[$dn]][[$tn]].[[$dn]][[$tn]]
    //expectedBody    := ""

    t.Logf("TestRowDelete()...\n")
    td = &TestData_[[$dn]][[$tn]]{}
    td.Setup(t)

    // Delete a record.
    rcd.TestData(1)             // "B"
    keys := rcd.KeysToValue()
    t.Logf("\tSetting up to delete (%d)\"%s\" row...\n", len(keys), keys)
    urlStr := fmt.Sprintf("/[[$tn]]/delete?%s", keys)
    td.GetReq(urlStr, "")

    // Now get the Response and check it.
    td.CheckStatus(http.StatusOK)
    t.Logf("\t actualHeader: %q\n", td.Resp.Header)
    actualBody := td.ResponseBody()
    t.Logf("\t actualBody: %s\n", string(actualBody))
    //TODO: Update this (right now, output is too much.)
    //if expectedBody != string(actualBody) {
        //t.Errorf("Expected the message '%s'\n", expectedBody)
    //}

    rcd.TestData(1)             // "B"
    err = td.db.RowFind(&rcd)
    if err == nil {
        t.Fatalf("Expected Not Found error from RowFind, got ok\n")
    }

    t.Logf("TestRowDelete() - End of Test\n\n\n")
}

//----------------------------------------------------------------------------
//                             Row Empty
//----------------------------------------------------------------------------

func Test[[$dn]][[$tn]]HndlrRowEmpty(t *testing.T) {
    var td          *TestData_[[$dn]][[$tn]]
/*****
    expectedBody    := ""
 *****/

    t.Logf("Test[[$tn]].RowEmpty()...\n")
    td = &TestData_[[$dn]][[$tn]]{}
    td.Setup(t)

    // Display empty record.
    t.Logf("\tSetting up for Empty...\n")
    urlStr := fmt.Sprintf("/[[$tn]]/empty")
    td.GetReq(urlStr, "")

    // Now get the Response and check it.
    td.CheckStatus(http.StatusOK)
    t.Logf("\t actualHeader: %q\n", td.Resp.Header)
    actualBody := td.ResponseBody()
    t.Logf("\t actualBody: %s\n", string(actualBody))
/*****
    if expectedBody != string(actualBody) {
        t.Errorf("Expected the message '%s'\n", expectedBody)
    }
 *****/

    t.Logf("Test[[$tn]].RowEmpty() - End of Test\n\n\n")
}

//----------------------------------------------------------------------------
//                             Row First
//----------------------------------------------------------------------------

func Test[[$dn]][[$tn]]HndlrRowFirst(t *testing.T) {
    var td          *TestData_[[$dn]][[$tn]]
    var rcd         [[$dn]][[$tn]].[[$dn]][[$tn]]
/*****
    expectedBody    := ""
 *****/

    t.Logf("Test[[$tn]].RowFirst()...\n")
    td = &TestData_[[$dn]][[$tn]]{}
    td.Setup(t)

    // Delete a record.
    rcd.TestData(2)             // "C"
    keys := rcd.KeysToValue()
    t.Logf("\tSetting up to find first (%d)\"%s\" row...\n", len(keys), keys)
    urlStr := fmt.Sprintf("/[[$tn]]/first?%s", keys)
    td.GetReq(urlStr, "")

    // Now get the Response and check it.
    td.CheckStatus(http.StatusOK)
    t.Logf("\t actualHeader: %q\n", td.Resp.Header)
    actualBody := td.ResponseBody()
    t.Logf("\t actualBody: %s\n", string(actualBody))
/*****
    if expectedBody != string(actualBody) {
        t.Errorf("Expected the message '%s'\n", expectedBody)
    }
 *****/

    t.Logf("Test[[$tn]].RowFirst() - End of Test\n\n\n")
}

//----------------------------------------------------------------------------
//                             Row Insert
//----------------------------------------------------------------------------

func Test[[$dn]][[$tn]]HndlrRowInsert(t *testing.T) {
    var td          *TestData_[[$dn]][[$tn]]
    var rcd         [[$dn]][[$tn]].[[$dn]][[$tn]]
    //expectedBody    := ""

    t.Logf("Test[[$tn]]RowInsert()...\n")
    td = &TestData_[[$dn]][[$tn]]{}
    td.Setup(t)

    // Insert a "Z" record.
    rcd.TestData(25)        // "Z"
    keys := rcd.KeysToValue()
    data := rcd.FieldsToValue()
    urlStr := fmt.Sprintf("/[[$tn]]/insert?%s", keys)
    t.Logf("\tSetting up to insert (%d)\"%s\" row...\n", len(keys), keys)
    td.PostReq(urlStr, data)

    // Now get the Response and check it.
    td.CheckStatus(http.StatusOK)
    t.Logf("\t actualHeader: %q\n", td.Resp.Header)
    actualBody := td.ResponseBody()
    t.Logf("\t actualBody: %s\n", string(actualBody))
    //TODO: Update this (right now, output is too much.)
    //if expectedBody != string(actualBody) {
        //t.Errorf("Expected the message '%s'\n", expectedBody)
    //}

    t.Logf("Test[[$tn]]RowInsert() - End of Test\n\n\n")
}

//----------------------------------------------------------------------------
//                             Row Next
//----------------------------------------------------------------------------

func Test[[$dn]][[$tn]]HndlrRowNext(t *testing.T) {
    var td          *TestData_[[$dn]][[$tn]]
    var rcd         [[$dn]][[$tn]].[[$dn]][[$tn]]

    t.Logf("Test[[$tn]].RowNext()...\n")
    td = &TestData_[[$dn]][[$tn]]{}
    td.Setup(t)

    // Build and execute a URL.
    rcd.TestData(0)             // "A"
    keys := rcd.KeysToValue()
    t.Logf("\tSetting up for next with keys of (%d)\"%s\"\n", len(keys), keys)
    urlStr := fmt.Sprintf("/[[$tn]]/next?%s", keys)
    td.GetReq(urlStr, "")

    t.Logf("Test[[$tn]].RowNext() - End of Test\n\n\n")
}

//----------------------------------------------------------------------------
//                             Row Prev
//----------------------------------------------------------------------------

func Test[[$dn]][[$tn]]HndlrRowLastPrev(t *testing.T) {
    var td          *TestData_[[$dn]][[$tn]]

    t.Logf("Test[[$tn]].RowPrev()...\n")
    td = &TestData_[[$dn]][[$tn]]{}
    td.Setup(t)

    t.Logf("Test[[$tn]].RowPrev() - End of Test\n\n\n")
}

//----------------------------------------------------------------------------
//                             Row Display
//----------------------------------------------------------------------------

func Test[[$dn]][[$tn]]HndlrRowDisplay(t *testing.T) {
    var td          *TestData_[[$dn]][[$tn]]

    t.Logf("Test[[$tn]].RowDisplay()...\n")
    td = &TestData_[[$dn]][[$tn]]{}
    td.Setup(t)

    t.Logf("Test[[$tn]]RowShow() - End of Test\n\n\n")
}

//----------------------------------------------------------------------------
//                             Row Update
//----------------------------------------------------------------------------

func Test[[$dn]][[$tn]]HndlrRowUpdate(t *testing.T) {
    var td          *TestData_[[$dn]][[$tn]]

    t.Logf("Test[[$tn]].RowUpdate()...\n")
    td = &TestData_[[$dn]][[$tn]]{}
    td.Setup(t)

    t.Logf("Test[[$tn]].RowUpdate() - End of Test\n\n\n")
}

