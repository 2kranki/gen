// vi:nu:et:sts=4 ts=4 sw=4
// See License.txt in main repository directory

// SQL Application main program

[[- $dot := .]]
[[- $d  := .TD.Data]]
[[- $dn := .TD.Data.TitledName]]
[[- $plg := $d.Plugin.Plugin]]
[[- $typ := $plg.Name]]

// Generated: [[Time]] for [[$typ]] Database

package main

import (
    "flag"
    "fmt"
    "log"
    "os"
)

var (
	debug    	bool
	force    	bool
	noop     	bool
	quiet    	bool
	db_name     string
	db_pw       string
	db_port     string
	db_srvr     string
	db_user     string
	http_srvr   string
	http_port   string
	baseDir     string
[[ if .TD.Main.Flags -]]
    [[GenVarDefns]]
[[- end -]]
)


[[ if .TD.Main.Usage ]]
func usage() {
    	fmt.Fprintf(flag.CommandLine.Output(), "Usage of %s:\n", os.Args[0])
    	[[ if .TD.Main.Usage.Line -]]
	        fmt.Fprintf(flag.CommandLine.Output(), "[[ .Usage.Line ]]\n")
        [[ end ]]
	    fmt.Fprintf(flag.CommandLine.Output(), "\nOptions:\n")
	    flag.PrintDefaults()
	    fmt.Fprintf(flag.CommandLine.Output(), "\nNotes:\n")
        fmt.Fprintf(flag.CommandLine.Output(), "'baseDir' is assumed to point to a directory where the application\n")
        fmt.Fprintf(flag.CommandLine.Output(), " can find 'html', 'css' and 'tmpl' sub-directories.\n\n")
	    [[ if .TD.Main.Usage.Notes -]]
            [[ range $t := .TD.Main.Usage.Notes ]]
                fmt.Fprintf(flag.CommandLine.Output(), "[[ $t ]]")
            [[- end -]]
        [[ end ]]

}
[[- end ]]

func main() {
    var wrk     string

    // Set up flag variables
    [[ if GenDebugging -]]
        log.Printf("\tSetting up the flag variables...\n")
    [[- end ]]
[[ if .TD.Main.Usage ]]
	flag.Usage = usage
[[ end -]]
	flag.BoolVar(&debug, "debug", true, "enable debugging")
	flag.BoolVar(&force, "force", true, "enable over-writes and deletions")
	flag.BoolVar(&force, "f", true, "enable over-writes and deletions")
	flag.BoolVar(&noop, "noop", true, "execute program, but do not make real changes")
	flag.BoolVar(&quiet, "quiet", true, "enable quiet mode")
	flag.BoolVar(&quiet, "q", true, "enable quiet mode")
[[ if .TD.Main.Flags -]]
    [[ GenFlagSetup ]]
[[ end -]]
    [[$d.Plugin.Plugin.GenFlagArgDefns $dn]]
	flag.StringVar(&http_port, "httpPort", "8090", "server port")
	flag.StringVar(&http_srvr, "httpServer", "localhost", "server site")
	flag.StringVar(&baseDir, "basedir", ".", "Base Directory for Templates, HTML and CSS")

    // Parse the flags and check them
    [[ if GenDebugging -]]
        log.Printf("\tParsing the flags...\n")
    [[- end ]]
	flag.Parse()
	if debug {
		log.Println("\tIn Debug Mode...")
	}

	// Collect variables from Environment and override value if present.
    [[ if GenDebugging -]]
        log.Printf("\tCollecting the variables from Environment and override value if present...\n")
    [[- end ]]
    wrk = os.Getenv("[[$d.UpperName]]_HTTP_PORT")
    if len(wrk) > 0 {
        http_port = wrk
    }
    wrk = os.Getenv("[[$d.UpperName]]_HTTP_SERVER")
    if len(wrk) > 0 {
        http_srvr = wrk
    }
    wrk = os.Getenv("[[$d.UpperName]]_BASEDIR")
    if len(wrk) > 0 {
        baseDir = wrk
    }
[[ if .TD.Main.Flags -]]
    [[ GenEnvSetup $d.UpperName ]]
[[ end -]]
    [[ $d.Plugin.Plugin.GenEnvArgDefns $d.UpperName ]]

    // Execute the main process.
    [[ if GenDebugging -]]
        log.Printf("\tExecuting the main process...\n")
    [[- end ]]
	exec()
}


