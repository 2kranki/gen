// vi:nu:et:sts=4 ts=4 sw=4
// See License.txt in main repository directory

// SQL Application main program

// Notes:
//  *   All static (ie non-changing) files should be served from the 'static'
//      subdirectory.

// Generated: [[Time]]
[[- $dot := .]]
[[- $d  := .TD.Data]]
[[- $dn := .TD.Data.TitledName]]
[[- $plg := $d.Plugin.Plugin]]
[[- $typ := $plg.Name]]

package main

import (
    "fmt"
    "log"
	"net/http"
	"os"
    "os/signal"

    "[[$d.Name]]/pkg/hndlr[[$dn]]"
	[[ range $t := $d.Tables -]]
        [[- $tn := $t.TitledName ]]
        "[[$d.Name]]/pkg/hndlr[[$dn]][[$tn]]"
        "[[$d.Name]]/pkg/io[[$dn]][[$tn]]"
	[[- end ]]
    "[[$d.Name]]/pkg/io[[$dn]]"
    [[ if GenHttps -]]
        "github.com/2kranki/go_util"
    [[- end ]]
)

const (
    RowsPerPage = 15
)

var     hndlrs[[$dn]]    *hndlr[[$dn]].Tmpls[[$dn]]
[[ range $t := $d.Tables -]]
    [[- $tn := $t.TitledName ]]
    var hndlrs[[$dn]][[$tn]]     *hndlr[[$dn]][[$tn]].Handlers[[$dn]][[$tn]]
[[- end ]]

var [[$d.Name]]IO *io[[$dn]].IO_[[$dn]]
[[range $t := $d.Tables -]]
    [[- $tn := $t.TitledName]]
    var [[$d.Name]][[$tn]]IO  *io[[$dn]][[$tn]].IO_[[$dn]][[$tn]]
[[- end ]]


[[ if GenHttps -]]
// genCerts generates the Certificates needed for HTTPS.
func genCerts() {
    var err         error
    var out         string

    [[ if GenDebugging -]]
        log.Printf("\tGenerating HTTPS Certificates if needed...\n")
    [[- end ]]
    if certDir == "" {
        log.Fatalf("Error: Missing certificate path!\n\n")
    }

    [[ if GenDebugging -]]
        log.Printf("\tChecking for HTTPS Certificates in %s...\n", certDir)
    [[- end ]]
    certPath := util.NewPath(certDir)
    if certPath == nil {
        log.Fatalf("Error: Creating %s path\n\n", certPath.String())
    }
    if err = certPath.CreateDir(); err != nil {
        log.Fatalf("Error: Create %s : %s\n\n", certPath.String(), err.Error())
    }

    certPem := certPath.Append("cert.pem")
    if certPem == nil {
        log.Fatalf("Error: Creating %s/cert.pem path\n\n", certPath.String())
    }
    keyPem := certPath.Append("key.pem")
    if keyPem == nil {
        log.Fatalf("Error: Creating %s/key.pem path\n\n", certPath.String())
    }
    if certPem.IsPathRegularFile() && keyPem.IsPathRegularFile() && !force {
        return
    }

    [[ if GenDebugging -]]
        log.Printf("\tMissing HTTPS Certificates will now be generated...\n")
    [[- end ]]
    // NOTE - The cmd to create the certificates may need to be massaged for
    //      a more specific installation.
    //TODO: Allow for password to be substituted.
    cmd := util.NewExecArgs("openssl", "req", "-x509", "-nodes",
     "-days", "365", "-newkey", "rsa:2048", "-keyout", keyPem.String(),
     "-out", certPem.String(), "-passout", "pass:xyzzy",
     "-subj", "/C=US/ST=Florida/L=Tampa/O=De/OU=Dev/CN=example.com")
    [[ if GenDebugging -]]
        log.Printf("\tExecuting %s...\n", cmd.CommandString())
    [[- end ]]
    if cmd == nil {
        log.Fatalf("Error: Could not create cmd object!\n")
    }
    out, err = cmd.RunWithOutput()
    if err != nil {
        log.Fatalf("Error: Did not create HTTPS Certificates : %s : %s!\n",
                    err.Error(), out)
    }
    if certPem.IsPathRegularFile() && keyPem.IsPathRegularFile() {
        return
    }

    log.Fatalf("Error: OpenSSL did not create the certificates!\n")
}
[[- end ]]

// HndlrFavIcon is the default Favorite Icon Handler.  It defaults to
// returning a 405 status to indicate that no Icon is available.
func HndlrFavIcon(w http.ResponseWriter, r *http.Request) {

    [[ if GenDebugging -]]
        fmt.Printf("HndlrFavIcon(%s)\n", r.Method)
    [[- end ]]

    if r.Method != "GET" {
	    http.NotFound(w, r)
	}
    http.Error(w, http.StatusText(405), http.StatusMethodNotAllowed)

    [[ if GenDebugging -]]
        fmt.Printf("...end HndlrFavIcon(Error:405)\n")
    [[- end ]]
}

// HndlrHome responds to a URL with no sub-elements.  It defaults to
// providing the default Menu to the browser/caller.
func HndlrHome(w http.ResponseWriter, r *http.Request) {

    [[ if GenDebugging -]]
        fmt.Printf("HndlrHome(%s)\n", r.Method)
    [[- end ]]

    if r.URL.Path != "/" {
        [[ if GenDebugging -]]
            fmt.Printf("...end HndlrHome(Error 404) Not '/' URL\n")
        [[- end ]]
        http.NotFound(w, r)
        return
    }

    [[ if GenDebugging -]]
        fmt.Printf("\tHndlrHome Serving File: ./html/[[$dn]].menu.html\n")
    [[- end ]]
    hndlrs[[$dn]].MainDisplay(w, "")
    //http.ServeFile(w, r, baseDir+"/html/[[$dn]].menu.html")

    [[ if GenDebugging -]]
        fmt.Printf("...end HndlrHome()\n")
    [[- end ]]
}

[[ if GenMuxWrapper -]]
// To understand the following, review packages net/http and net/url and review:
// https://stackoverflow.com/questions/25456390/how-to-log-http-server-errors-in-golang

// MuxResponseWriterWrap provides a wrapper around the Response
// Writer so that we can intercept data being written out if
// needed.
type MuxResponseWriterWrap struct {
	http.ResponseWriter
	status int
}

func (r *MuxResponseWriterWrap) Write(p []byte) (int, error) {
	return r.ResponseWriter.Write(p)
}

func (r *MuxResponseWriterWrap) WriteHeader(status int) {
	r.status = status
	r.ResponseWriter.WriteHeader(status)
}

// MuxHandlerWrapper will intercept each mux request and give
// us access both, before and after, the request is handled.
func MuxHandlerWrapper(f http.Handler) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		record := &MuxResponseWriterWrap{
			ResponseWriter: w,
		}

        // Intercept before the request is handled.
		log.Println("mux input: (", r.Method, ") ", r.URL.String())

		f.ServeHTTP(record, r)

        // Intercept after the request is handled.
		log.Println("Bad Request ", record.status)

		if record.status == http.StatusBadRequest {
			log.Println("Bad Request ", r)
		}
	}
}

[[- end ]]

func mainExec() {

    // Generate HTTPS Certificates if needed.
    [[ if GenHttps -]]
        genCerts()
    [[- end ]]

    // Setup the I/O.
    setupIO()

    // Set up templates.
    setupTmpls()

    // Set up default URL handlers
    [[ if GenDebugging -]]
        log.Printf("\tSetting up the Mux Handlers...\n")
    [[- end ]]
    mux := http.NewServeMux()
	mux.HandleFunc("/", HndlrHome)
	mux.HandleFunc("/favicon.ico", HndlrFavIcon)

	[[range $t := $d.Tables -]]
	    [[ $tn := $t.TitledName ]]
	    // [[$dn]].[[$tn]] URL handlers for table maintenance
	    hndlrs[[$dn]][[$tn]] = hndlr[[$dn]][[$tn]].NewHandlers[[$dn]][[$tn]]([[$d.Name]][[$tn]]IO, RowsPerPage, mux)
	    hndlrs[[$dn]][[$tn]].Tmpls = hndlrs[[$dn]]
        if hndlrs[[$dn]][[$tn]].Tmpls == nil {
            log.Fatalf("ERROR - Failed to load templates from hndlrs[[$dn]]\n\n\n")
        }
	[[- end ]]

	// Start the HTTP Server.
    [[ if GenDebugging -]]
        log.Printf("\tStarting Server at %s:%s...\n", http_srvr, http_port)
    [[- end ]]
	srvrStr := fmt.Sprintf("%s:%s", http_srvr, http_port)
    [[ if GenMuxWrapper -]]
        s := &http.Server{
            Addr:    srvrStr,
            Handler: MuxHandlerWrapper(mux),
        }
        log.Fatal(s.ListenAndServe())
    [[ else -]]
	    log.Fatal(http.ListenAndServe(srvrStr, mux))
	[[- end ]]

}

// setupIO connects to the datatbase.
func setupIO() {

    // Connect the databases.
    [[ if GenDebugging -]]
        log.Printf("\tConnecting to the Database...\n")
    [[- end ]]
    [[$d.Name]]IO = io[[$dn]].NewIo[[$dn]]()
    //[[$d.Name]]IO.SetName(db_name)
    [[$d.Name]]IO.SetPort(db_port)
    [[$d.Name]]IO.SetPW(db_pw)
    [[$d.Name]]IO.SetPort(db_port)
    [[$d.Name]]IO.SetServer(db_srvr)
    [[$d.Name]]IO.SetUser(db_user)
    err := [[$d.Name]]IO.DatabaseCreate(db_name)
    if err != nil {
        log.Fatalf("ERROR - Failed to Connect Database\n\n\n")
    }

    // Set up to disconnect the database upon program interrupt.
    chnl := make(chan os.Signal, 1)
    signal.Notify(chnl, os.Interrupt)
    go func(){
        <-chnl
        if [[$d.Name]]IO.IsConnected() {
            err = [[$d.Name]]IO.Disconnect()
            if err != nil {
                log.Fatal(err)
            }
        }
        os.Exit(1)
    }()

    // Set up the Table I/O.
	[[range $t := $d.Tables -]]
        [[- $tn := $t.TitledName]]
	    [[$d.Name]][[$tn]]IO = io[[$dn]][[$tn]].NewIo[[$dn]][[$tn]]([[$d.Name]]IO)
        if [[$d.Name]][[$tn]]IO == nil {
            log.Fatalf("ERROR - Failed to Connect to Table, [[$dn]][[$tn]]\n\n\n")
        }
	[[- end ]]

}

func setupTmpls() {

    [[ if GenDebugging -]]
        log.Printf("\tSetting up the Templates...\n")
    [[- end ]]
    hndlrs[[$dn]] = hndlr[[$dn]].NewTmpls[[$dn]](baseDir + "/tmpl")
    hndlrs[[$dn]].SetupTmpls()

}