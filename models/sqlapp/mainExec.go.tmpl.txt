// vi:nu:et:sts=4 ts=4 sw=4
// See License.txt in main repository directory

// SQL Application main program

// Notes:
//  1.  When working with package main, please keep in mind that the
//      more functionality that you can move into functions, the easier
//      testing will be. This allows you to test the functionality in
//      small portions. Moving common functionality to packages that are
//      easily tested is even better.
//  2.  All static (ie non-changing) files should be served from the 'static'
//      subdirectory.

// Generated: [[Time]]
[[- $dot := .]]
[[- $d  := .TD.Data]]
[[- $dn := .TD.Data.TitledName]]
[[- $plg := $d.Plugin.Plugin]]
[[- $typ := $plg.Name]]

package main

import (
    "fmt"
    "log"
	"net/http"
	"os"
    "os/signal"

    "[[$d.Name]]/pkg/hndlr[[$dn]]"
	[[ range $t := $d.Tables -]]
        [[- $tn := $t.TitledName ]]
        "[[$d.Name]]/pkg/hndlr[[$dn]][[$tn]]"
        "[[$d.Name]]/pkg/io[[$dn]][[$tn]]"
	[[- end ]]
    "[[$d.Name]]/pkg/io[[$dn]]"
    "[[$d.Name]]/pkg/httpServer"
)

const (
    RowsPerPage = 15
)

var     hndlrs[[$dn]]    *hndlr[[$dn]].Tmpls[[$dn]]
[[ range $t := $d.Tables -]]
    [[- $tn := $t.TitledName ]]
    var hndlrs[[$dn]][[$tn]]     *hndlr[[$dn]][[$tn]].Handlers[[$dn]][[$tn]]
[[- end ]]

var [[$d.Name]]IO *io[[$dn]].IO_[[$dn]]
[[range $t := $d.Tables -]]
    [[- $tn := $t.TitledName]]
    var [[$d.Name]][[$tn]]IO  *io[[$dn]][[$tn]].IO_[[$dn]][[$tn]]
[[- end ]]


// HndlrFavIcon is the default Favorite Icon Handler.  It defaults to
// returning a 405 status to indicate that no Icon is available.
func HndlrFavIcon(w http.ResponseWriter, r *http.Request) {

    [[ if GenDebugging -]]
        fmt.Printf("HndlrFavIcon(%s)\n", r.Method)
    [[- end ]]

    if r.Method != "GET" {
	    http.NotFound(w, r)
	}
    http.Error(w, http.StatusText(405), http.StatusMethodNotAllowed)

    [[ if GenDebugging -]]
        fmt.Printf("...end HndlrFavIcon(Error:405)\n")
    [[- end ]]
}

// HndlrHome responds to a URL with no sub-elements.  It defaults to
// providing the default Menu to the browser/caller.
func HndlrHome(w http.ResponseWriter, r *http.Request) {

    [[ if GenDebugging -]]
        fmt.Printf("HndlrHome(%s)\n", r.Method)
    [[- end ]]

    if r.URL.Path != "/" {
        [[ if GenDebugging -]]
            fmt.Printf("...end HndlrHome(Error 404) Not '/' URL\n")
        [[- end ]]
        http.NotFound(w, r)
        return
    }

    [[ if GenDebugging -]]
        fmt.Printf("\tHndlrHome Serving File: ./html/[[$dn]].menu.html\n")
    [[- end ]]
    hndlrs[[$dn]].MainDisplay(w, "")
    //http.ServeFile(w, r, baseDir+"/html/[[$dn]].menu.html")

    [[ if GenDebugging -]]
        fmt.Printf("...end HndlrHome()\n")
    [[- end ]]
}

func mainExec() {

    h := httpServer.NewHttp(http_srvr, http_port, https_port)
    if h == nil {
        log.Fatalf("Error: Unable to create HTTP/HTTPS server!\n")
    }
    [[ if GenHttps -]]
    /*
        err := h.SetupCerts(certDir)
        if err != nil {
            log.Fatalf("Error: Unable to create HTTPS Certificates!\n")
        }
    */
    [[- end ]]

    // Setup the I/O.
    setupIO()

    // Set up templates.
    setupTmpls()

    // Set up default URL handlers
    [[ if GenDebugging -]]
        log.Printf("\tSetting up the Mux Handlers...\n")
    [[- end ]]
	h.Mux.HandleFunc("/", HndlrHome)
	h.Mux.HandleFunc("/favicon.ico", HndlrFavIcon)

	[[range $t := $d.Tables -]]
	    [[ $tn := $t.TitledName ]]
	    // [[$dn]].[[$tn]] URL handlers for table maintenance
	    hndlrs[[$dn]][[$tn]] = hndlr[[$dn]][[$tn]].NewHandlers[[$dn]][[$tn]]([[$d.Name]][[$tn]]IO, RowsPerPage, h.Mux)
	    hndlrs[[$dn]][[$tn]].Tmpls = hndlrs[[$dn]]
        if hndlrs[[$dn]][[$tn]].Tmpls == nil {
            log.Fatalf("ERROR - Failed to load templates from hndlrs[[$dn]]\n\n\n")
        }
	[[- end ]]

	// Start the HTTP Server.
[[ if GenMuxWrapper -]]
    h.Serve(true)
[[ else -]]
    h.Serve(false)
[[- end ]]
}

// setupIO connects to the datatbase.
func setupIO() {

    // Connect the databases.
    [[ if GenDebugging -]]
        log.Printf("\tConnecting to the Database...\n")
    [[- end ]]
    [[$d.Name]]IO = io[[$dn]].NewIo[[$dn]]()
    //[[$d.Name]]IO.SetName(db_name)
    [[$d.Name]]IO.SetPort(db_port)
    [[$d.Name]]IO.SetPW(db_pw)
    [[$d.Name]]IO.SetPort(db_port)
    [[$d.Name]]IO.SetServer(db_srvr)
    [[$d.Name]]IO.SetUser(db_user)
    err := [[$d.Name]]IO.DatabaseCreate(db_name)
    if err != nil {
        log.Fatalf("ERROR - Failed to Connect Database\n\n\n")
    }

    // Set up to disconnect the database upon program interrupt.
    chnl := make(chan os.Signal, 1)
    signal.Notify(chnl, os.Interrupt)
    go func(){
        <-chnl
        if [[$d.Name]]IO.IsConnected() {
            err = [[$d.Name]]IO.Disconnect()
            if err != nil {
                log.Fatal(err)
            }
        }
        os.Exit(1)
    }()

    // Set up the Table I/O.
	[[range $t := $d.Tables -]]
        [[- $tn := $t.TitledName]]
	    [[$d.Name]][[$tn]]IO = io[[$dn]][[$tn]].NewIo[[$dn]][[$tn]]([[$d.Name]]IO)
        if [[$d.Name]][[$tn]]IO == nil {
            log.Fatalf("ERROR - Failed to Connect to Table, [[$dn]][[$tn]]\n\n\n")
        }
	[[- end ]]

}

func setupTmpls() {

    [[ if GenDebugging -]]
        log.Printf("\tSetting up the Templates...\n")
    [[- end ]]
    hndlrs[[$dn]] = hndlr[[$dn]].NewTmpls[[$dn]](baseDir + "/tmpl")
    hndlrs[[$dn]].SetupTmpls()

}