#!/usr/bin/env python3
[[- $dot := . ]]
[[- $d   := .TD.Data ]]
[[- $dn  := .TD.Data.TitledName ]]
[[- $plg := $d.Plugin.Plugin ]]
[[- $typ := $plg.Name ]]
# vi:nu:et:sts=4 ts=4 sw=4

""" Test the Application(s)

This module tests the previously built go application generated by genapp.

The module must be executed from the repository that contains the Jenkinsfile.

"""


#   This is free and unencumbered software released into the public domain.
#
#   Anyone is free to copy, modify, publish, use, compile, sell, or
#   distribute this software, either in source code form or as a compiled
#   binary, for any purpose, commercial or non-commercial, and by any
#   means.
#
#   In jurisdictions that recognize copyright laws, the author or authors
#   of this software dedicate any and all copyright interest in the
#   software to the public domain. We make this dedication for the benefit
#   of the public at large and to the detriment of our heirs and
#   successors. We intend this dedication to be an overt act of
#   relinquishment in perpetuity of all present and future rights to this
#   software under copyright law.
#
#   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
#   OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
#   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
#   OR OTHER DEALINGS IN THE SOFTWARE.
#
#   For more information, please refer to <http://unlicense.org/>


import      argparse
import      json
import      os
import      re
import      subprocess
import      sys
import      time


oArgs       = None
szAppName   = '[[$dn]]'
[[ if ne $typ "sqlite" -]]
szDbName    = '[[$plg.DockerName]]' # docker name used to pull the image
szDbTag     = '[[$plg.DockerTag]]' # docker tag used to pull the image
[[- end ]]
szGoDir     = '${HOME}/go'


################################################################################
#                           Object Classes and Functions
################################################################################

#---------------------------------------------------------------------
#       getAbsolutePath -- Convert a Path to an absolute path
#---------------------------------------------------------------------

def getAbsolutePath( szPath, fCreateDirs=False ):
    '''Convert Path to an absolute path.'''
    if oArgs.fDebug:
        print("getAbsolutePath(%s)" % ( szPath ))

    # Convert the path.
    szWork = os.path.normpath( szPath )
    szWork = os.path.expanduser( szWork )
    szWork = os.path.expandvars( szWork )
    szWork = os.path.abspath( szWork )

    if fCreateDirs:
        szDir = os.path.dirname(szWork)
        if len(szDir) > 0:
            os.mkdirs(szDir)

    # Return to caller.
    if oArgs.fDebug:
        print("\tabsolute_path=", szWork)
    return szWork


#---------------------------------------------------------------------
#       buildApp -- Build the Application
#---------------------------------------------------------------------

def         buildApp(appDir):
    ''' Build an application '''

    curDir = os.getcwd()
    tmpDir = None
    if sys.platform == 'darwin':
        # /tmp is easiest to use from bash/zsh which really is /private/tmp.
        # The other options are:
        # /var/tmp
        # ${TMPDIR}
        tmpDir = '/tmp'
    if tmpDir == None:
        tmpDir = os.getenv('TMP')
    if tmpDir == None:
        tmpDir = os.getenv('TEMP')
    if tmpDir == None:
        print("Error - Can't find temporary Directory, TMP or TEMP, in environment!")
        sys.exit(4)
    appDirAbs = getAbsolutePath(os.path.join(curDir, 'cmd', appDir))

    try:
        if oArgs.iVerbose or oArgs.fDebug:
            print("Issuing: cd {0}".format(appDirAbs))
        os.chdir(appDirAbs)
        szCmd = 'go fmt ./...'
        if oArgs.iVerbose or oArgs.fDebug:
            print("Issuing: {0}".format(szCmd))
        os.system('go fmt ./...')
        tmpBin = os.path.join(tmpDir, 'bin')
        if not os.path.exists(tmpBin):
            if oArgs.iVerbose or oArgs.fDebug:
                print("Making: {0}".format(tmpBin))
            os.makedirs(tmpBin, 0o777)
        szCmd = 'go build -o {0} -v'.format(os.path.join(tmpDir, 'bin', appDir))
        if oArgs.iVerbose or oArgs.fDebug:
            print("Issuing: {0}".format(szCmd))
        os.system(szCmd)
    finally:
        if oArgs.iVerbose or oArgs.fDebug:
            print("Issuing: cd {0}".format(curDir))
        os.chdir(curDir)

    return


#---------------------------------------------------------------------
#    dockerContainerRun -- Run a Docker Image Creating a Container
#---------------------------------------------------------------------

def         dockerContainerRun(szName, szTag):
    ''' Pull a Docker Image
    '''

    image = dockerImageFind(szName, szTag)
    if image == None:
        pass
    else:
        if oArgs.fForce:
            pass
        else:
            return

    szImageName = szName
    if len(szTag):
        szImageName += ':' + szTag
    szContainerName = szImageName + '_1'

    # Get rid of any prior images if necessary
    if image == None:
        pass
    else:
        szCmd = 'docker image rm -f {0}'.format(szImageName)
        if oArgs.iVerbose or oArgs.fDebug:
            print("Issuing: {0}".format(szCmd))
        try:
            os.system(szCmd)
        except OSError:
            pass

    # Pull the image
    szCmd = "docker image pull {0} --format='{{json .}}'".format(szImageName)
    if oArgs.iVerbose or oArgs.fDebug:
        print("Issuing: {0}".format(szCmd))
    try:
        os.system(szCmd)
    except OSError:
        pass

    return


#---------------------------------------------------------------------
# dockerImageFind -- Find information about a current Docker Image
#---------------------------------------------------------------------

def         dockerImageFind(szName, szTag):
    ''' Find information about a current Docker Image '''
    imageInfo = None

    images = dockerImages()
    if len(images):
        for image in images:
            if szName == image['Repository'] and szTag == image['Tag']:
                imageInfo = image

    return imageInfo


#---------------------------------------------------------------------
# dockerImages -- Get information about all the current Docker Images
#---------------------------------------------------------------------

def         dockerImages( ):
    ''' Get Docker Image(s) Summary Data '''

    szCmd = "docker image ls --format='{{json .}}'"
    if oArgs.iVerbose or oArgs.fDebug:
        print("Issuing: {0}".format(szCmd))
    result = subprocess.getstatusoutput(szCmd)
    if oArgs.fDebug:
        print("\tResult = %s, %s..." % (result[0], result[1]))
    iRC = result[0]
    szOutput = result[1]
    lines = szOutput.splitlines(False)
    szInput = '['
    for l in lines:
        szInput += l + ','
    szInput = szInput[:-1] + ']'


    jsonImages = None
    if len(szOutput):
        jsonImages = json.loads(szInput)

    return jsonImages


#---------------------------------------------------------------------
#       dockerImagePull -- Pull a Docker Image
#---------------------------------------------------------------------

def         dockerImagePull(szName, szTag):
    ''' Pull a Docker Image
    '''

    image = dockerImageFind(szName, szTag)
    if image == None:
        pass
    else:
        if oArgs.fForce:
            pass
        else:
            return

    szImageName = szName
    if len(szTag):
        szImageName += ':' + szTag

    # Get rid of any prior images if necessary
    if image == None:
        pass
    else:
        szCmd = 'docker image rm -f {0}'.format(szImageName)
        if oArgs.iVerbose or oArgs.fDebug:
            print("Issuing: {0}".format(szCmd))
        try:
            os.system(szCmd)
        except OSError:
            pass

    # Pull the image
    szCmd = "docker image pull {0} --format='{{json .}}'".format(szImageName)
    if oArgs.iVerbose or oArgs.fDebug:
        print("Issuing: {0}".format(szCmd))
    try:
        os.system(szCmd)
    except OSError:
        pass

    return


#---------------------------------------------------------------------
#   goget -- Go Get Specific Packages if not already downloaded
#---------------------------------------------------------------------

def         goget(pkgDir):
    ''' Build an application '''
    goPkgDir = getAbsolutePath(os.path.join(szGoDir, 'src', pkgDir))

    if not os.path.exists(goPkgDir) :
        os.system('go get {0}'.format(pkgDir))

    return


def         parseArgs(listArgV=None):
    '''
    '''
    global      oArgs

    # Parse the command line.
    szUsage = "usage: %prog [options] sourceDirectoryPath [destinationDirectoryPath]"
    oCmdPrs = argparse.ArgumentParser( )
    oCmdPrs.add_argument('-b', '--build', action='store_false', dest='fBuild',
                         default=True, help='Do not build genapp before using it'
                         )
    oCmdPrs.add_argument('-d', '--debug', action='store_true', dest='fDebug',
                         default=False, help='Set debug mode'
                         )
    oCmdPrs.add_argument('-f', '--force', action='store_true', dest='fForce',
                         default=False, help='Set force mode'
                         )
    oCmdPrs.add_argument( '-v', '--verbose', action='count', default=1,
                        dest='iVerbose', help='increase output verbosity'
                        )
    oCmdPrs.add_argument('--appdir', action='store', dest='szAppDir',
                         default='/tmp', help='Set Application Base Directory'
                         )
    oCmdPrs.add_argument('--appname', action='store', dest='szAppName',
                         default='app01', help='Set Application Base Name'
                         )
    oCmdPrs.add_argument('--bindir', action='store', dest='szBinDir',
                         default='/tmp/bin', help='Set Binary Directory'
                         )
    oCmdPrs.add_argument('--mdldir', action='store', dest='szModelDir',
                         default='./models', help='Set genapp Model Directory'
                         )
    oCmdPrs.add_argument('args', nargs=argparse.REMAINDER, default=[])
    oArgs = oCmdPrs.parse_args( listArgV )
    if oArgs.iVerbose:
        print('*****************************************')
        print('*      Generating the Application       *')
        print('*****************************************')
        print()
    oArgs.szAppPath = os.path.join(oArgs.szAppDir, oArgs.szAppName)
    if oArgs.fDebug:
        print("In DEBUG Mode...")
        print('Args:', oArgs)




################################################################################
#                           Main Program Processing
################################################################################

def         mainCLI( listArgV=None ):
    """ Command-line interface. """
    global      oArgs
    
    # Do initialization.
    iRc = 20

    # Parse the command line.
    parseArgs(lisArgV)

    # Perform the specified actions.
    iRc = 0
    try:
        image = dockerImageFind(szDbName, szDbTag)
        if image == None:
            pass
        else:
            print(image)
        [[ if eq $typ "mariadb" -]]
        #goget('github.com/go-sql-driver/mysql')
        [[ else if eq $typ "mssql" -]]
        #goget('github.com/denisenkom/go-mssqldb')
        [[ else if eq $typ "mysql" -]]
        #goget('github.com/go-sql-driver/mysql')
        [[ else if eq $typ "postgres" -]]
        #goget('github.com/lib/pq')
        [[ else if eq $typ "sqlite" -]]
        #goget('github.com/mattn/go-sqlite3')
        [[ end -]]
        #goget('github.com/shopspring/decimal')
        #buildApp(szAppName)
    finally:
        pass

    return iRc




################################################################################
#                           Command-line interface
################################################################################

if '__main__' == __name__:
    startTime = time.time( )
    iRc = mainCLI( sys.argv[1:] )
    if oArgs.iVerbose or oArgs.fDebug:
        if 0 == iRc:
            print("...Successful completion.")
        else:
            print("...Completion Failure of %d" % (iRc))
    endTime = time.time( )
    if oArgs.iVerbose or oArgs.fDebug:
        print("Start Time: %s" % (time.ctime(startTime)))
        print("End   Time: %s" % (time.ctime(endTime)))
        diffTime = endTime - startTime      # float Time in seconds
        iSecs = int(diffTime % 60.0)
        iMins = int((diffTime / 60.0) % 60.0)
        iHrs = int(diffTime / 3600.0)
        print("run   Time: %d:%02d:%02d" % (iHrs, iMins, iSecs))
    sys.exit( iRc or 0 )


