// vi:nu:et:sts=4 ts=4 sw=4
// See License.txt in main repository directory

// io[[.TD.Data.TitledName]] contains all the functions
// and data to interact with the SQL Database.

[[- $dot := .]]
[[- $d  := .TD.Data]]
[[- $dn := .TD.Data.TitledName]]
[[- $plg := $d.Plugin.Plugin]]
[[- $typ := $plg.Name]]

// Generated: [[Time]] for [[$typ]] Database

package io[[$dn]]

import (
	"testing"
)


var io[[$dn]]   *IO_[[$dn]]


//============================================================================
//                              Tests
//============================================================================

//----------------------------------------------------------------------------
//                              Connect
//----------------------------------------------------------------------------

func Test[[$dn]]Connect(t *testing.T) {
    var err         error

	t.Logf("TestConnect()...\n")
[[ if ne $typ "sqlite" -]]
	// DockerRun(t)
[[- end ]]

	io[[$dn]] = NewIo[[$dn]]()
	io[[$dn]].DefaultParms()
    err = io[[$dn]].Connect("")
    if err == nil {
	    err = io[[$dn]].Disconnect()
        if err != nil {
            t.Fatalf("Error: %s\n\n", err)
        }
        io[[$dn]] = nil
    } else {
            t.Fatalf("Error: %s\n\n", err)
    }

	t.Logf("TestConnect() - End of Test\n\n\n")
}

//----------------------------------------------------------------------------
//                              Disconnect
//----------------------------------------------------------------------------

func Test[[$dn]]Disconnect(t *testing.T) {
    var err         error

	t.Logf("TestDisconnect()...\n")
	io[[$dn]] = NewIo[[$dn]]()
	io[[$dn]].DefaultParms()

	// Disconnect before a connection has been made.
    err = io[[$dn]].Disconnect()
    if err == nil {
        t.Fatal("Error: Never Connected!\n\n\n")
    }

    if io[[$dn]].IsConnected() {
        t.Fatal("Error: Never Connected!\n\n\n")
    }

    // Now connect then disconnect.
    err = io[[$dn]].Connect("")
    if err != nil {
        t.Fatal("Error: Cannot connect: ", err)
    }

    if !io[[$dn]].IsConnected() {
        t.Fatal("Error: Never Connected!\n\n\n")
    }

    err = io[[$dn]].Disconnect()
    if err != nil {
        t.Fatal("Error: Cannot disconnect: ", err)
    }
    io[[$dn]] = nil

	t.Logf("TestDisconnect() - End of Test\n\n\n")
}

[[ if eq $typ "mssql" -]]
//----------------------------------------------------------------------------
//                              IsDatabaseDefined
//----------------------------------------------------------------------------

func Test[[$dn]]IsDatabaseDefined(t *testing.T) {
    var err         error

	t.Logf("TestIsDatabaseDefined()...\n")
[[ if ne $typ "sqlite" -]]
	//DockerRun(t)
[[- end ]]

	io[[$dn]] = NewIo[[$dn]]()
	io[[$dn]].DefaultParms()
    err = io[[$dn]].Connect("")
    if err != nil {
        t.Fatalf("Error: %s\n\n", err)
    }

    if !io[[$dn]].IsDatabaseDefined("[[$dn]]") {
        err = io[[$dn]].DatabaseCreate("[[$dn]]")
        if err != nil {
            t.Fatalf("\tError - Database Create failed: %s\n", err.Error())
        }
    }

    err = io[[$dn]].Disconnect()
    if err != nil {
        t.Fatalf("Error: %s\n\n", err)
    }
    io[[$dn]] = nil

	t.Logf("TestIsDatabaseDefined() - End of Test\n\n\n")
}
[[ end ]]

//----------------------------------------------------------------------------
//                              DatabaseCreate
//----------------------------------------------------------------------------

func Test[[$dn]]DatabaseCreate(t *testing.T) {
    var err         error

	t.Logf("TestDatabaseCreate()...\n")
[[ if ne $typ "sqlite" -]]
	//DockerRun(t)
[[- end ]]

	io[[$dn]] = NewIo[[$dn]]()
	io[[$dn]].DefaultParms()

    err = io[[$dn]].DatabaseCreate("[[$dn]]")
    if err != nil {
        t.Errorf("\tError - Database Create failed: %s\n", err.Error())
    }

    err = io[[$dn]].Disconnect()
    if err != nil {
        t.Fatalf("Error: %s\n\n", err)
    }
    io[[$dn]] = nil

	t.Logf("TestQueryRow() - End of Test\n\n\n")
}
//----------------------------------------------------------------------------
//                              QueryRow
//----------------------------------------------------------------------------

func Test[[$dn]]QueryRow(t *testing.T) {
    var err         error

	t.Logf("TestQueryRow()...\n")
	//DockerRun(t)

	io[[$dn]] = NewIo[[$dn]]()
	io[[$dn]].DefaultParms()

    err = io[[$dn]].DatabaseCreate("[[$dn]]")
    if err != nil {
        t.Errorf("\tError - Database Create failed: %s\n", err.Error())
    }

    err = io[[$dn]].Disconnect()
    if err != nil {
        t.Fatalf("Error: %s\n\n", err)
    }
    io[[$dn]] = nil

	t.Logf("TestQueryRow() - End of Test\n\n\n")
}
